#+TITLE: things-to-do
#+AUTHOR: Tigany Zarrouk
#+LATEX_HEADER: \usepackage[hyperref,x11names]{xcolor}
#+LATEX_HEADER: \usepackage{physics}
#+LATEX_HEADER: \usepackage{cases}
#+LATEX_HEADER: \graphicspath{ {./} }
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{arrows,plotmarks,calc,positioning,fit}
#+LATEX_HEADER: \usetikzlibrary{shapes.geometric, decorations.pathmorphing, patterns, backgrounds}
#+LATEX_HEADER: \newcommand{\tikzremember}[1]{{  \tikz[remember picture,overlay]{\node (#1) at (0,11pt) { };}}}
#+LATEX_HEADER: \tikzset{snake it/.style={decorate, decoration=snake}}
#+LATEX_HEADER: \usepackage[nottoc]{tocbibind}




* Tasks

** TODO Could one see how to use Ising model SFEs and Fourier Interpolation?
- Maybe one can do this for the Prismatic stacking fault.
  - The calculation only depends of periodicity perpendicular to the plane
    that one wants the stacking fault on.
  - This means that one can have a stacking that is probably ABCD or something
    Must investigate this further. 
** TODO See how the PDOS changes with addition of oxygen and how the tetrahedral/octahedral sites change this.
** TODO Calculate solution enthalpy of oxygen in titanium. 
- The solution enthalpy $E_{\text{sol}}$ and excess volume $\Delta V$ is 
  $$ E_{\text{sol} = E( \text{Ti}_n \text{O} ) - E( \text{Ti}_n ) - E(O) $$
  $$ \Delta V = V( \text{Ti}_n \text{O} ) - V( \text{Ti}_n ) $$
- $E( \text{Ti}_n \text{O} )$ is the excess energ of the bulk supercell with n
  Ti atoms and one impurity atom. $E( \text{Ti}_n )$ is the energy of the pure
  cells.
- Influence of cell sizes and solution enthalpy needs to be considered.

** TODO Compile list of papers to read for Omar
	
** TODO Use python voronoi around a surface to find triangles through which dislocations will pass
** TODO Has anyone investigated the stacking faults of Omega phase?
   - Maybe as Omega phase doesn't occur that often, perhaps it has not been
     studied in detail.
   - I should look further into thsi
** TODO Finish doing the gamma surfaces for all planes for pure titanium. 
*** Checking the convergence criteria
      - Now checking the convergence criteria.

**** How the lattice parameters change with the fineness of the k mesh
     - Maybe with a less fine k mesh the lattice parameters become
       worse. 
     - SOLUTION: The lattice parameters do not change that much under
     differences with the k mesh. [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/get_hom_shear_bc_gs.py::lattice_parameters_vs_k_mesh(%20tbe_command,%20minimiserf%3D'Nelder-Mead',%20plot%3DTrue,%20data%3Ddata)][File with change of the lattice
     parameters with k mesh. ]]
     [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/a_hcp_vs_nk.png][a vs nk]]
     [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/c_hcp_vs_nk.png][c_vs_nk]]
     [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/e_hcp_vs_nk.png][e_vs_nk]]

***** What if rmaxh is smaller or larger?
      - If rmaxh is is smaller (say rmaxh = 6.7 bohr) then we get the same
        results. 
   #+CAPTION: Variation of energy with k mesh.
   #+NAME:   fig:e_hcp_vs_nk_small_rmaxh.png
      file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/e_hcp_vs_nk_small_rmaxh_better_format.png
   #+CAPTION: Variation of a hcp with k mesh.
   #+NAME:   fig:a hcp_vs_nk_small_rmaxh.png
      file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/a_hcp_vs_nk_small_rmaxh_better_format.png
   #+CAPTION: Variation of c hcp with k mesh.
   #+NAME:   fig:c_hcp_vs_nk_small_rmaxh.png
      file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/c_hcp_vs_nk_small_rmaxh_better_format.png]]
	- Data: [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/a_hcp_vs_nk_rmaxh_small.pkl][a_hcp small rmaxh]], [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/c_hcp_vs_nk_rmaxh_small.pkl][c_hcp small rmaxh]], [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/e_hcp_vs_nk_rmaxh_small.pkl][e_hcp small rmaxh]]. 
      - If rmaxh is larger ( rmaxh = 20 bohr ), all possible interactions must
        be included then. And so we get the same results. 
   #+CAPTION: Variation of energy with k mesh.
   #+NAME:   fig:e_hcp_vs_nk_large_rmaxh.png
	[[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/e_hcp_vs_nk_large_rmaxh.png]]
   #+CAPTION: Variation of a hcp with k mesh.
   #+NAME:   fig:a_hcp_vs_nk_large_rmaxh.png
	[[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/a_hcp_vs_nk_large_rmaxh.png]]
   #+CAPTION: Variation of c hcp with k mesh.
   #+NAME:   fig:c_hcp_vs_nk_large_rmaxh.png
	[[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/c_hcp_vs_nk_large_rmaxh.png]]
      - Data: [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/a_hcp_vs_nk_rmaxh_large.pkl][a_hcp large rmaxh]], [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/c_hcp_vs_nk_rmaxh_large.pkl][c_hcp large rmaxh]], [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/e_hcp_vs_nk_rmaxh_large.pkl][e_hcp large rmaxh]]
      
**** How does rmaxh change the lattice parameters?

***** How does rmaxh change the energy of a supercell
      - How does the number of neighbours change and what is the relation
	between rmaxh and larger cell sizes.
*** Notes on the model.
    It seems that there is a lot of charge moving around when doing the
    relaxations. 
    I think that this may be due to the fact that there is no Hubbard U
    interactions, a parameter for the coulomb interaction, which stops the
    charges from moving freely. 
    - TBE control file is currently set to this:
     #+BEGIN_SRC bash
TBE: nbas = 128 nspec = 1 verb 31 
TB: rmaxh = 20, m-stat: F-P rlx-vol, rho 
bz: metal
     #+END_SRC
    

     
*** DONE Implement Homogenous Shear boundary conditions for gamma surface calculation.
    CLOSED: [2018-11-19 Mon 12:08]
** TODO Write first paragraph of Literature review
*** TODO Summarise Stacking Faults and write review
*** TODO Write up the tight binding fitting of oxygen and an explanation for paramagnetism. 
*** TODO Summarise dislocations and Oxygen interactions (review)
** TODO Titanium Optimisation
#+BEGIN_SRC bash
START: OBJECTIVE FUNCTION

ti_obj_weights.py 
 starting..
   ext = ti ,
   file = fmin.val ,
   vals =  fdd=0.1174466123 qdds=0.3974516540 qddp=0.3909616843 qddd=0.4513787662 b0=12.4201609898 p0=1.1030807403 ndt=2.0279590685 cr1=-6.2099122560 cr2=3.942308298
6 r1=1.0308550249 rc=1.2000213349 cr3=-1.0000000000 rmaxh=1.2120215483 b1=0.0000000000 p1=0.0000000000 npar=11  
   binaries in /opt/lmto/bld7.13.0/openmpi/3.1.0/intel/14.0.1/o



Obtaining Bandwidth and optimising c and a 

    Bandwidth Scaling routine 

nbands = 18, ef = 0.02977, ncol = 2
Bandwidth at Gamma:
   TBE:    5.916 eV
   DFT:    5.900 eV


Getting hcp c/a 
Using Nelder-Mead

Optimization terminated successfully.
         Current function value: -0.684831
         Iterations: 28
         Function evaluations: 64
Got a, c : a=5.4161008400, c=8.8279655592 c/a=1.6299485220. Volume per atom=112.1333377662
Targets  : a=5.5767896900, c=8.8521008200 c/a=1.5873112152. Volume per atom=119.2107777334

Getting hcp shear constants ...

 C_11 =    122.335 GPa

 C_33 =    124.303 GPa

 C_44 =     42.309 GPa

 C_66 =     44.277 GPa

 C_12 =     33.618 GPa

 C_13 =     33.782 GPa

shear constants: c_11=122.3, c_33=124.3, c_44= 42.3, c_12= 33.6, c_13= 33.8, c_66=  44.3, S= 64.4, R=134.7, H=133.5 
         target: c_11=176.1, c_33=190.5, c_44= 50.8, c_12= 86.9, c_13= 68.3, c_66=  44.6, S= 73.1, R=185.4, H=146.7 

   bulk modulus: 63; target: 110 

Obtaining frequencies for M and H points in hcp Brillouin zone

M frequencies tbe (THz) =  2.5331326195  2.5331326290  2.5331326290  2.5331326386  3.8256959262  3.8256959262 
M frequencies LDA (THz) =  2.8585871860  2.8585871860  2.8585871860  2.8585871860  5.6670604683  5.6670604683 

H frequencies tbe (THz) =  1.5399197708  1.5399197708  1.8398976627  1.8398976627  3.9669737038  3.9669737038 
H frequencies LDA (THz) =  4.8064342322  5.5801002486  5.6531673769  6.3665184154  6.4005018626  7.6408237318 

Obtaining bcc Ti quantities

  trial bcc output from pfit = 0.0
  VF = 0.825226
  Epp bcc = 3.71884
Get hcp - fcc energy difference ..
Using Nelder-Mead

Optimization terminated successfully.
         Current function value: -0.336410
         Iterations: 14
         Function evaluations: 30
 fcc minimum lattice parameter
  a_fcc = 7.676507,  a_fcc_exp = 7.886770 
E_fcc - E_hcp = 6.006mRy per atom 

Getting omega phase lattice constants and internal parameter ...
Using Nelder-Mead

Optimization terminated successfully.
         Current function value: -1.029450
         Iterations: 27
         Function evaluations: 58

Got omega : a=8.4761, c=5.4016 c/a=0.6373, using u=1.0000. Volume per atom=112.0287
Targets   : a=8.7325, c=5.3234 c/a=0.6096, using u=1.0000. Volume per atom=117.1878
bcc:     a=  5.82, K=378 Volume per atom=98
target:  a=  6.18, K=118,                     
        E_bcc - E_hcp = 82.515mRy per atom 


 Build Objective Function
     ... With Elastic Net Regularisation
parameter names       fdd     qdds     qddp     qddd       b0       p0      ndt      cr1      cr2       r1       rc 
parameter values    0.117    0.397    0.391    0.451   12.420    1.103    2.028   -6.210    3.942    1.031    1.200 
          p_norm    0.509    1.722    1.694    1.955   53.802    4.778    8.785   26.900   17.078    4.466    0.000 

Total p_norm = 121.68857


 Quantity      predicted    target     norm_pred   norm_tar    sq diff.      weight    objective * 100^2 
------------------------------------------------------------------------------------------------------------------------
 a_hcp   :   5.41610084   5.57678969   5.41610084   5.57678969   0.02582091 1000.00000000    258209.07
 c_hcp   :   8.82796556   8.85210082   8.82796556   8.85210082   0.00058251 1000.00000000      5825.11
 c_11    : 122.33537796 176.10000000   1.86500000   2.85408495   0.97828904   1.00000000      9782.89
 c_33    : 124.30323926 190.50000000   1.89500000   3.08746839   1.42198086   1.00000000     14219.81
 c_44    :  42.30901811  50.80000000   0.64500000   0.82332490   0.03179977   1.00000000       318.00
 c_12    :  33.61763067  86.90000000   0.51250000   1.40840422   0.80264436   1.00000000      8026.44
 c_13    :  33.78161911  68.30000000   0.51500000   1.10695061   0.35040552   1.00000000      3504.06
 a_omega :   8.47612090   8.73254342   8.47612090   8.73254342   0.06575251  10.00000000      6575.25
 c_omega :   5.40164179   5.32343103   5.40164179   5.32343103   0.00611692  10.00000000       611.69
 DE(o,h) :  -0.73462833  -0.73475386  -0.73462833  -0.73475386   0.00000002  10.00000000         0.00
 DE(f,h) :   6.00578500   6.60015000   6.00578500   6.60015000   0.35326975  10.00000000     35326.98
 a_bcc   :   5.81618924   6.17948863   5.81618924   6.17948863   0.13198645   5.00000000      6599.32
 M_freq_0:   2.53313262   2.85858719   2.53313262   2.85858719   0.10592067   0.10000000       105.92
 M_freq_1:   2.53313263   2.85858719   2.53313263   2.85858719   0.10592067   0.10000000       105.92
 M_freq_2:   2.53313263   2.85858719   2.53313263   2.85858719   0.10592067   0.10000000       105.92
 M_freq_3:   2.53313264   2.85858719   2.53313264   2.85858719   0.10592066   0.10000000       105.92
 M_freq_4:   3.82569593   5.66706047   3.82569593   5.66706047   3.39062338   0.10000000      3390.62
 M_freq_5:   3.82569593   5.66706047   3.82569593   5.66706047   3.39062338   0.10000000      3390.62
 H_freq_0:   1.53991977   4.80643423   1.53991977   4.80643423  10.67011673   0.10000000     10670.12
 H_freq_1:   1.53991977   5.58010025   1.53991977   5.58010025  16.32305829   0.10000000     16323.06
 H_freq_2:   1.83989766   5.65316738   1.83989766   5.65316738  14.54102591   0.10000000     14541.03
 H_freq_3:   1.83989766   6.36651842   1.83989766   6.36651842  20.49029544   0.10000000     20490.30
 H_freq_4:   3.96697370   6.40050186   3.96697370   6.40050186   5.92205930   0.10000000      5922.06
 H_freq_5:   3.96697370   7.64082373   3.96697370   7.64082373  13.49717403   0.10000000     13497.17
 a_fcc   :   7.67650748   7.88677000   7.67650748   7.88677000   0.04421033   5.00000000      2210.52
 bw at G :   5.91588880   5.89956160   5.91588880   5.89956160   0.00026658 100.00000000       266.58

Objective function: 1657010

#+END_SRC

** Completed Tasks
*** Investigate why rmaxh changes energy
   - Variation of rmaxh does not change the energy
   - Obviously the number of neighbours changes with rmaxh.
   - Conclusion: rmaxh only determines what atoms are its neighbours. 
   - This is the file which investigates this:
     [[file:~/Documents/ti/complete_titanium/ti_01-11-18/mod_rmaxh/check_rmaxh_energy_neighbours.py][check_rmaxh_energy_number_neighbours]]
   - Here is the data:
     [[file:~/Documents/ti/complete_titanium/ti_01-11-18/mod_rmaxh/energy_for_energy_vs_rmaxh.pkl][Energy data for energy vs rmaxh]]
     [[file:~/Documents/ti/complete_titanium/ti_01-11-18/mod_rmaxh/rmaxh_for_energy_or_n_neighbours_vs_rmaxh.pkl][rmaxh data for energy/n_neighbours vs rmaxh]]
     [[file:~/Documents/ti/complete_titanium/ti_01-11-18/mod_rmaxh/n_neighbours_for_n_neighbours_vs_rmaxh.pkl][n_neighbours for n_neighbours vs rmaxh]]
   - The output pictures are this:
   #+CAPTION: Variation of energy with change in rmaxh
   #+NAME:   fig:Energy_vs_rmaxh.png
   [[file:~/Documents/ti/complete_titanium/ti_01-11-18/mod_rmaxh/Energy_vs_rmaxh.png]]
   #+CAPTION: Variation of number of neighbours with change in rmaxh
   #+NAME:   fig:n_neighbours_vs_rmaxh.png
   [[file:~/Documents/ti/complete_titanium/ti_01-11-18/mod_rmaxh/n_neighbours_vs_rmaxh.png]]
   
*** Show supercell of BOP working 

*** Check Stability Criteria
   - Check if the matrix is complex
   - Check if it is positive definite. 
**** Results 
    - Without changing anything, the total energy of hcp in Tony's newest
      model is $E_{\text{tot hcp}} = -0.57230068 \text{Ryd}$
    - I thought perhaps that the lattice parameters and the elastic constants
      that way might produce a different result.
    - Minimising the lattice parameters gives an energy of  $E_{\text{tot
      hcp}} = -0.572351 \text{Ryd}$ with lattice parameters of
     $a_{\text{hcp}} = 5.4908 \text{bohr}$, $c_{\text{hcp}} = 8.8353 \text{bohr}$ giving $c/a_{\text{hcp}} = 1.6091 \text{bohr}$
    - Elastic constants, in GPa are \[ C_{11}=185.4, C_{33}=191.8, C_{44}= 39.7, C_{12}= 56.5, C_{13}= 56.1\]
    - The stability criteria are still satisfied. 
#+BEGIN_SRC bash
Checking Stability for tbe elastic constants. 
 is C_ij matrix positive definite?: True

Criteria for stability:

C_11 - C_12 > 0 
  True

C_11 + C_12 + C_33 > 0 
  True

( C_11 + C_12 ) * C_33 - 2 * C_13**2 > 0 
  True

C_44 > 0 
  True

(C_11 - C_12) > 0
  True

( C_11 + C_12 )*C_33 > 0 
  True

C_11 + C_12 > 0
  True

C_33 > 0
  True

C_11 > 0
  True

#+END_SRC
*** Build force constant matrix for hcp 
   - If the force constant matrix is positive definite then there shan't be
     any soft modes.
**** Results
    - File used is [[file:~/Documents/ti/complete_titanium/ti_01-11-18/check_ec_pos_definite/check_ec_pos_definite.py][check_ec_pos_definite.py]]
    - Using Fourth order $\mathcal{O}(h^{4})$ formula for the mixed
      derivatives, one can find the $6\times6$ force constant matrix.
      \begin{align}
        \frac{1}{144 h^2} (     &  8.  (  f_{ 1,-2} +  f_{ 2,-1} + f_{-2, 1} + f_{-1, 2} )\\
                               &-  8.  (  f_{-1,-2} +  f_{-2,-1} + f_{ 1, 2} + f_{ 2, 1} )\\
                               &-  1.  (  f_{ 2,-2} +  f_{-2, 2} - f_{-2,-2} - f_{ 2, 2} )\\
                               &+  64. (  f_{-1,-1} +  f_{ 1, 1} - f_{ 1,-1} - f_{-1, 1} )  )
      \end{align}

      #+BEGIN_SRC bash
Eigenvalues
[-0.3173  0.3173  2.5963 -0.3185  0.3185 -2.5963]

 Is force constant matrix positive definite? False
Force Constant Matrix
[[ 7.7099e-13  2.3901e-11 -2.3901e-11 -3.1729e-01  2.3901e-11 -2.3901e-11]
 [-7.7099e-13  0.0000e+00  0.0000e+00 -7.7099e-13 -3.1847e-01  0.0000e+00]
 [ 7.7099e-13  0.0000e+00  0.0000e+00  7.7099e-13  0.0000e+00  2.5963e+00]
 [-3.1729e-01 -2.5443e-11  2.5443e-11  2.5443e-11 -2.5443e-11  2.5443e-11]
 [-7.7099e-13 -3.1847e-01  0.0000e+00 -7.7099e-13  0.0000e+00  0.0000e+00]
 [ 7.7099e-13  0.0000e+00  2.5963e+00  7.7099e-13  0.0000e+00  0.0000e+00]]
      #+END_SRC

    - This matrix is not positive definite and so the structure is not
      stable.

    - Using second order formula one obtains
      #+BEGIN_SRC bash
Eigenvalues
[ 0.32  -0.32   2.545 -2.545  0.32  -0.32 ]

 Is force constant matrix positive definite? False
Force Constant Matrix
[[ 0.     0.     0.    -0.32   0.     0.   ]
 [ 0.     0.     0.     0.    -0.32   0.   ]
 [ 0.     0.     0.     0.     0.     2.545]
 [-0.32   0.     0.     0.     0.     0.   ]
 [ 0.    -0.32   0.     0.     0.     0.   ]
 [ 0.     0.     2.545  0.     0.     0.   ]]

     #+END_SRC

    - Using another model we get another matrix that is not positive
      definite. 
      #+BEGIN_SRC bash
tbe ti -vhcp=1  -vfddtt=0.4668418806546737 -vqddstt=0.6660968695540497 -vb0tt=94.4011791926749 
-vp0tt=1.1902574670213237 -vb1tt=-26.704816810939302 -vp1tt=0.9999600888309667 
-vcr1=-6.158653986495596 -vcr2=3.9496749559495172 -vcr3=-1.0282840982939534 
-vndt=1.992406298332605 -vahcp=5.5274  -vqq=1.5997394796830335 -vrmaxh=8.51 -vnk=30 
Eigenvalues
[ 1.8512 -1.8512  0.2823 -0.2823 -0.281   0.281 ]

 Is force constant matrix positive definite? False
Force Constant Matrix
[[-2.4672e-13 -4.8572e-13 -5.0114e-13 -2.8232e-01  0.0000e+00  1.0618e-03]
 [-4.8572e-13  0.0000e+00  0.0000e+00  0.0000e+00 -2.8103e-01  0.0000e+00]
 [-5.0114e-13  0.0000e+00  0.0000e+00  1.0618e-03  0.0000e+00  1.8512e+00]
 [-2.8232e-01  0.0000e+00  1.0618e-03 -2.5443e-13  0.0000e+00 -1.0618e-03]
 [ 0.0000e+00 -2.8103e-01  2.4672e-13  0.0000e+00  0.0000e+00  0.0000e+00]
 [ 1.0618e-03 -2.4672e-13  1.8512e+00 -1.0618e-03 -2.4672e-13 -7.4015e-13]]
      #+END_SRC

*** Make dislocations go through centre of triangle of atoms 

*** Investigate why the gamma surface minima are not along the lines joining the vectors. 

*** Change the lattice vectors to make the dislocation displacement fields periodic

*** Why is the displacement in the x direction in the graphs of create cells?

*** Make sure that the displacements are periodic 

*** Calculate the Internal elastic constants, like in Cousins cite:Cousins1979

*** Fix pyramidal gamma surface and how it erroneously writes to the site file only 12 atoms
*** Python script: remove include statements  -->  One file.  




* General notes 

** Electronic Structure
*** Tight Binding
**** Tight Binding Band Model

As with all tight-binding models, they are based on a linear combination of atomic orbitals basis. 
We compose our hamiltonian as a matrix that is in this basis, where each column/row corresponds to a particular
atom's orbital.
The /on-site/ terms are on the diagonal as these simply correspond to the energy of a particular orbital
e.g.$\epsilon_s$, $\epsilon_p$, $\epsilon_d$, which are also parameters along with the assumed orbital occupancies 
of the free atoms $N_{\mathbf{R}\ell}$.
The other terms are off diagonal terms which either represent the bonding between different atoms, if it is a matrix element
between two different atomic sites, or if the terms are on the the same atomic site, this represents an interaction
between orbitals on the same atom. These are crystal field terms and relate to the distortion of sperical symmetry arising from
interaction of orbitals on the same site, which causes a splitting of energy levels. 
In the tight binding model these come from the self-consistent polarisable tight-binding 
model. If the cutoffs between bond integrals is short, then the Hamiltonian matrix becomes sparse, 
which means that diagonalisation is quick. 

For the band model we have the density matrix composed in the normal way. 
$$ \hat{\rho} = \sum_{n} f_{n} \ket{n} \bra{n}$$ and it is straight forward to see that this density matrix satisfies 
$$ \hat{\rho} = N $$ where $N$ is the number of electrons in this system. 

The band energy is then given by $$E_{\text{band}} = \text{Tr}\hat{\rho}\hat{H} = \sum_{n} f_{n}\epsilon_{n} $$, where $\epsilon_{n}$
is the energy of an eigenstate. This band energy is essentially the sum of the electron kinetic energies and electron-ion interaction energies. 

A pair potential is added to this to account for the electron-electron and ion-ion contributions to the total energy 
as given in density functional theory.
So the total energy is 

$$ E_{\text{tot}} =   E_{\text{band}} + E_{\text{rep}} $$


The band model is /not/ consistent with the force theorem, as the bond model is.
The force theorem states that there is no contribution to the force from self-consistent redistribution of charge 
as a result of the virtual displacement of an atom. 

There is no self-consistent charge redistribution in the band model.

If we move an atom in the band model, then there should be a change in the band structure energy from electron-electron interaction. 
However, all electron-electron interactions are controlled by the pair-potential, as per its definition so there is /not/ exact 
cancellation. 

This is exactly cancelled in DFT by the double counting term. 


**** Tight Binding Bond Model

***** Paxton: Implementation by Diagonalisation. 
This follows from cite:Paxton:153084

In the TBBM we use the /covalent bond energy/ as the fundamental quantity of interest that we want to calculate.
To obtain this energy, one simply ignores the diagonal terms when taking the trace over the product of the density matrix and
the Hamiltonian (when we calculate the band energy):)

#+BEGIN_EXPORT latex
\[ 
E_{\text{bond}} = \frac{1}{2} \sum_{\mathbf{R}L\mathbf{R}'L'//\mathbf{R}/neq\mathbf{R}'}
                             2\rho_{\mathbf{R}L\mathbf{R}'L'} H^{0}_{\mathbf{R}'L'\mathbf{R}L}.
\]
#+END_EXPORT


The terms we have excluded from the band energy are now grouped with the corresponding quantities in the free atom. 
This gives rise to the /promotion energy/.

#+BEGIN_EXPORT latex
\begin{align}
E_{\test{prom}} &= \sum_{\mathbf{R}L} \Big(\rho_{\mathbf{R}L\mathbf{R}'L'}H^{0\mathbf{R}'L'\mathbf{R}L} - N_{\mathbf{R}\ell}\epsilon_{\mathbf{R}\ell} \Big)\\
              &= \sum_{\mathbf{R}L} \Big(\rho_{\mathbf{R}L\mathbf{R}'L'} - N_{\mathbf{R}\ell} \Big) \epsilon_{\mathbf{R}L}\\
              &= \sum_{\mathbf{R}L} \Delta q_{\mathbf{R}L} \epsilon_{\mathbf{R}\ell}
\end{align}
#+END_EXPORT

#+BEGIN_EXPORT latex
\begin{align}
E_{\test{prom}}^{\text{TBBM}} &= \sum_{\mathbf{R}L} \Big(\rho_{\mathbf{R}L\mathbf{R}'L'} - N_{\mathbf{R}\ell} \Big) H_{\mathbf{R}L\mathbf{R}L}\\
              &= \sum_{\mathbf{R}L} \Delta q_{\mathbf{R}L}( \epsilon_{\mathbf{R}\ell} + \Delta \epsilon_{\mathbf{R}\ell} )
\end{align}
#+END_EXPORT

Where the promotion energy represents the preparation of an atom going from the free state to that of one about to undergo bonding. 
E.g. the energy levels of particular atoms being prepared to undergo hybridisation.


The band model /is/ consistent with the force theorem as there is  self-consistent redistribution of charges. 
In the /band/ model there is no contribution to the forces from the promotion energy as 
$ \epsilon_{\mathbf{R}L}\delta q = \delta\epsilon{\mathbf{R}L} q = 0 $ as the eigenvalues do not change: they are constants. 

However the Mulliken charge transfers are not necessarily zero, and the force theorem necessitates contributions due to  
electrostatic charge transfer to be included in the calculation of the interatomic force. This means that the band model is 
inconsistent due to its neglect of these terms. 

The self-consistency that is imposed in the TBBM bond model is that of /local charge neutrality/. This means that the total charge 
on a particular site should equal that of the reference atom. This means that the /total/ Mulliken charge difference between that and
free atoms is /zero/. 

This self consistency is achieved by adjusting the on-site orbital energies. This only affects the diagonal of the Hamiltonian 
so only $E_{\text{prom}}$ changes. 

This means there is an additional contribtion to the force on atom $\mathbf{R}$ which comes from $\sum_{L} \Delta q_{L} \Delta \epsilon_{\ell}$. 

If all orbital energies are shifted by the same amount at each site, during self-consistency, then this term vanishes as 
$\epsilon_{\ell}$ is independent of $L$---as $L$ is the index which corresponds to angular momentum $nlm$. 
So the term moves to the front of the summation, and as the sum of all changes in charges are zero, by local charge neutrality,
 then the term vanishes. 

***** Sutton 1988: The Tight-Binding Bond Model
cite:Sutton1988

****** General Formulation
In the original paper of the tight-binding bond model, Sutton /et al/ obtain
the tight-binding bond model from the Harris-Foulkes functional.

If we say that the single particle potential of the Kohn-Sham equations is 
#+BEGIN_LaTeX
\[
\widetilde{V}(\mathbf{r}) = v(\mathbf{r}) + V^{\text{f}}(\mathbf{r}) + \mu_{\text{xc}}(\mathbf{r})
\]
#+END_LaTeX

where 
- $v(\mathbf{r})$ is the total ionic potential
- $V^{f}(\mathbf{r})$ is the Hartree potential (self-energy of the electron density.)
- $\mu_{xc}(\mathbf{r})$ is the exchange-correlation potential. 

Then we can solve for the Hamiltonian once, and an output charge density $\rho^{\text{out}}$ is
constructed from its eigenstates, without any self-consistency iterations.  

#+BEGIN_LaTeX
\[
\widetilde{H} = -\frac{1}{2} \nabla^{2} + \widetilde{V}(\mathbf{r})
\]
#+END_LaTeX



The Harris-Foulkes functional, which exploits the variational principle, gives 
the leading corrections to the total energy are second order in the difference 
between $\rho^{\text{f}}$, the input charge density and the exact charge density $\rho^{\text{sc}}$. 

#+BEGIN_LaTeX
\begin{align}
E = \sum_{n} f_{n} \tilde{\varepsilon_{n}} &- int \text{d}r \rho^{\text{f}}(\mathbf{r})
               \big( \frac{1}{2} V^{\text{f}}(\mathbf{r}) + \mu_{xc}^{\text{f}}(\mathbf{r})  \big)
               + E_{\text{xc}}[\rho^{\text{f}}] + E_{\text{ii}}\\
               &+ \mathcal{O}(\rho^{\text{sc}} - \rho^{\text{f}})^2 + \mathcal{O}(\rho^{\text{sc}} - \rho^{\text{out}})^2
\end{align}
#+END_LaTeX

where,
- $\rho^{\text{f}}$ is an input charge density which is formed
  from a superposition of isolated atomic charge densities. This if formed
  from condensing atoms infinitely far apart without allowing the atomic
  charge densities to change. 

- $\rho^{\text{out}}$ is the charge
  density formed from the /eigenstates/ of the Hamiltonian.

- $\rho^{\text{sc}}$ is the exact ground state charge density

- $f_{n}$ is the occupation number

- $\tilde{\varepsilon}_{n}$ is an eigenvalue of the single-particle
  Hamiltonian. 

- $E_{\text{ii}}$ is the ion-ion interaction energy. 

- $\Delta E_{xc}[\rho^{\text{f}}]$  which is the change in the exchange-correlation energy in forming the charge
  density $\rho^{\text{f}}$.

One obtains the binding energy as 
#+BEGIN_LaTeX
\[
E_{B} = \text{Tr}( \rho^{\text{out}} - \rho^{\text{f}} )\widetilde{H} + \Delta E_{es}[\rho^{\text{f}}] + \Delta E_{xc}[\rho^{\text{f}}]
\]
#+END_LaTeX

Where 
- $\rho^{\text{f}}$ is an input charge density which is formed
  from a superposition of isolated atomic charge densities. This if formed
  from condensing atoms infinitely far apart without allowing the atomic
  charge densities to change. 

- $\rho^{\text{out}}$ is the charge
  density formed from the /eigenstates/ of the Hamiltonian.

- $\Delta E_{es}[\rho^{\text{f}}]$ is the change in electrostatic energy
  of all valence electrons and ion cores when the atoms are condensed from
  infinity to make the solid---which included electron-electron, electron-ion
  and ion-ion electrostatic interactions

- $\Delta E_{xc}[\rho^{\text{f}}]$  which is the change in the exchange-correlation energy in forming the charge
  density $\rho^{\text{f}}$.

They express $\text{Tr}(\rho^{\text{out}} - \rho^{\text{f}})\widetilde{H}$ in the atomic
orbital representation as a sum over on-site terms and a sum over inter-site
terms. 

\[
\text{Tr}(\rho^{\text{out}} - \rho^{\text{f}})\widetilde{H} =
   \underset{\text{Promotion Energy}}{ 
      \sum_{i\\ \alpha\beta} 
         \big[ (\rho^{\text{out}})^{i\alpha i\beta} -
               (\rho^{\text{f}})^{i\alpha i\beta} \delta^{i\alpha}_{i\beta} \big]
         \widetilde{H}_{i\beta i\alpha} 
            }
  + \underset{Covalent Bond Energy}{
      \underset{i \neq j}{ \sum_{i \alpha}\sum_{j \beta} }
         (\rho^{\text{out}})^{i\alpha i\beta} \widetilde{H}_{j\beta i\alpha}
                }
\]

In ther first term, in a perfect cubic crystal, 
$\widetilde{H}_{i\alpha i\beta} = \widetilde{H}_{i\alpha i\beta}
\delta^{i\beta}_{i\alpha}$.
The diagonal elements $\widetilde{H}_{i\alpha i\alpha}$ are the free atomic
term values corrected by the crystal-field terms in the solid. So this first
term is the promotion energy: the enrgy associated with the change of
occupancy of the atomic orbitals on forming the solid from free atoms. 

if the atomic environment around each site in the solid is distorted then
$\widetilde{H}_{i\alpha i\beta}$ are non-zero because of crystal-field terms.

It is possible to disgonalise the part of the Hamiltonian $\widetilde{H}$
associated only with site $i$ and thys express the terms involving site $i$ in
this equation, but the new diagonal elements of $\widetilde{H}$ will vary from site
to site.

The second term is the covalent bond energy of the solid and it si equal to
the sum of the covalent energies of individual bonds between orbitals on
different atoms. This bond energy is part of the band energy of the solid

#+BEGIN_LaTeX
\begin{align}
E_{\text{cov}} &= \frac{1}{2}  \underset{i \neq j}{ \sum_{i \alpha}\sum_{j \beta} }
         (2 \rho^{\text{out}})^{i\alpha i\beta} \widetilde{H}_{j\beta i\alpha}\\
               &= E_{\text{band}} - 
              \sum_{i\\ \alpha\beta} 
                   (\rho^{\text{out}})^{i\alpha i\beta}
                    \widetilde{H}_{j\beta i\alpha}
\end{align}
#+END_LaTeX


They further argued that the terms $\Delta E_{xc}[\rho^{\text{f}}]$ 
$\Delta E_{es}[\rho^{\text{f}}]$ can be approximated by a repulsive pair potential
centred at atomic sites.

So then the binding energy can then be expressed as a sum of bond energies and
promotion energies, where each bond energy is a sum of the covalent energy of
the bond and the pair potential interaction. 

****** Interatomic forces

The forces on each atom can be found by differentiating the binding energy
with respect to $\mathbf{r}$, using the relation between the density matrix
and the Green's function,
\[
(\rho^{\text{out}})^{i\alpha i\beta} = -\frac{2}{\pi} \Im \int^{E_{\text{F}}} 
   G^{i\alpha j\beta} (E^{+}) \text{d}E
\]
and 
\[
 -\frac{1}{\pi} \Im \sum_{i \alpha} H_{p\mu i\alpha} G^{i\alpha l\gamma}
     =  -\frac{1}{\pi} \Im E G_{p\mu}^{l\gamma}
\]
with the Hellmann-Feynman theorem, which has also been derived by
cite:Foulkes1989. 

So the derivative of the binding energy with respect to $x_k$ is 

\[
\frac{\partial E_{\text{B}}}{\partial x_{k}} = 
   \frac{1}{2}\sum_{i\alpha}\sum_{j\beta} 2(\rho^{\text{out}})^{i\alpha}_{j\beta}
       \frac{\partial H^{j\beta}_{i\alpha}}{\partial x_{k}}
 - \sum_{i\alpha} (\rho^{\text{f}})^{i\alpha i\alpha} 
                  \frac{\partial H_{i\alpha i\alpha}}{\partial x_{k}}
 + \frac{\partial}{\partial x_{k}} \big(\Delta E_{xc}[\rho^{\text{f}}] + \Delta E_{es}[\rho^{\text{f}}] \big )
\]


This can be simplified with the following approximations:

1. The non-orthogonality of the atomic-orbital basis set may often be
    neglected becasue the leading correction terms to the energy are /second
    order/ in the overlap matrix.
2. Three-centre terms may be neglected because the leading three-centre
   corrections to the energy are also of second order.
3. Assume that $\widetilde{H}_{i\alpha i\beta} = \widetilde{H}_{i\alpha i\alpha}
   \delta^{i\beta}_{i\alpha}$---i.e. the Hamiltoniam matrix elements between
   /different orbitals/ on the same atom may be neglected.
4. Each atom may be assumed to remain charge neutral by varying the on-site
   Hamiltonian matrix elements in such a way that the energy splitting
   between different orbitals on the same atom are preserved.
   - This approximation ensures that contributions to the force in the above
     equation from on-site terms in ther first sum cancel those of the second sum
   - This leads to consistency with the force theorem. 

These approximations give the derivative of the binding energy to be:

\[
\frac{\partial E_{\text{B}}}{\partial x_{k}} = 
   \sum_{j \neq k}\sum_{\alpha\beta} 2(\rho^{\text{out}})_{k\alpha j\beta}
       \frac{\partial H_{j\beta k\alpha}}{\partial x_{k}}
  + \frac{\partial}{\partial x_{k}} \big(\Delta E_{xc}[\rho^{\text{f}}] + \Delta E_{es}[\rho^{\text{f}}] \big )
\]

****** Local Charge Neutrality 

The approximation to local charge neutrality is motivated by 
 1. In a metal where there is perfect screening any excess charge associated
    with an atom will be neutralised---similarly in a semiconductor where the
    band gap is much smaller than the widths of the valence and conduction
    bands the screening length is approximately the same as an inter-atomic
    separation and hence local charge neutrality will be a good
    approximation.
 2. To obtain the correct bulk modulus of the solid when it is calculated by
    the method of long waves or by homogeneous dilatation, the charge density
    must be treated within a self-consistent scheme, and LCN is the simplest
    assumption to make.
 3. There would be long range Coulomb terms if local charge neutrality were
    not required, in binary systems. Is is always possible to find a basis
    where each atom is neutral.
 4. Charge neutrality within the TBBM leads to an internally consistent
    picture of the heats of formation of transition metal alloys. 

This local charge neutrality is achieved by varying the on-site terms of the
Hamiltonian matrix elements. In general there would be contributions from the
intersite Hamiltonian matrix elements as the electronic charge is distributed
throughout the system. 

The explicit dependence of on-site Hamiltonian matrix elements on the
positions of neighbouring atoms appears in the model in the pair potential
because the on-site crystal-field terms contribute for example to $\Delta
E_{es}$. So the requirement for local charge neutrality results in the
on-site Hamiltonian matrix elements depending on the positions of neighbourigh
non-equivalent atoms. 

The energy splittings betweem orbitals are assumed to be constant at each
atomic site so all the diagonal Hamiltonian elements change by the same amount
$\delta \widetilde{H}_{i}$. This means ther eare no contributions to the force
from the promotion energy as discussed before. 

The bond order is determined by all inter-site and on-site Hamiltonian matrix
elements in the local atomic environment. So the forces from the covalent bond
terms are not simply two-body interactions even though the total force cay be
expressed as a sum of forces from each neighbouring atom. 

Self-consistency is important when it comes to calculating force
constants. With homogeneous strain all monatomic basis atoms remain equivalent
and therefore there is no charge transfer. 
However, if there is a volume change with the strain (NOTE: does this mean
that you can have a compression and tension, which conserves volume, in this
sense?), the Fermi level changes
and this gives rise to an important change in the energy which is second order
in the strain cite:Heine1980. 

******* Priester Ge-GaAs Justification
From cite:Priester1986 local charge neutrality was motivated in a Ge-GaAs
interface. 

All inter-atomic matrix are specified and the intra-atomic (on-site) terms are
adjusted to within an additive constant. These on-site terms become very
important when it comes to dealing with interfaces. 

\[
\Delta = \bar{ E }( \text{ GaAs } ) - \bar{ E }( \text{ Ge } )
\]

where $\bar{ E }( \text{ GaAs } )$, $\bar{ E }( \text{ Ge } )$ are average $sp^3$ energies 
(in the compound $\bar{E}$ is the average between the Ga and As $sp^3$
energies). These are the on-site terms. 

The charge disturbance is near the vicinity of the interface and it has been
shown that the screening length roughly $\sim 2\AA$, on the order of the
interplanar spacing. So one finds bulk values away from the interface. 

One wants to find this $\Delta$ so the valence-band maxima in each material
are positioned with respect to each other to obtain a band offset. 

There is only electron transfer between the two
interface planes. As there are two atoms per two-dimensional unit cell, the
electron transfer can be split into two components $\delta N_1$ from Ga to Ge
and $\delta N_2$ from As to Ge, where the difference is from the population of
the state compared to that of the bulk, which is the change in electron
concentration due to the formation of the interface. 

If all on-site terms of an atom $i$ are shifted by the same
amount $U_{i}$, from the reference state, then we can express this as a sum
over excess populations on each other atom
\[
U_{i} = \sum_{j} \gamma_{ij} \delta N_{j}
\] 
where $\gamma_{ij}$ are the corresponding intra- and inter-atomic Coulomb
terms. 

One can express $\delta N_{i}$ in terms of the $\delta N_{i}^0$ of the
reference situation so, when linearized

\[
\delta N_{i} = \delta N_{i}^0 + \sum_{j} X_{ij}U_j
\]

Solving in matrix form gives 

\[
U = ( 1 - \gamma X)^{-1} \gamma \delta N^0
\]

where $X$ is the susceptibility matrix. If the eigenvalues of the matrix
$\gamma X$ are much larger than 1 then we have approximate solutions 

\[
U \approx - X^{-1} \delta N^0
\]

which is exactly the result that one would obtain by local charge neutrality:
$\delta N = 0$.

The important point is that in the reference situation, where all intra-atomic (on-site)
terms take their bulk values and $\Delta = 0$, the quantities $\delta N_1$,
$\delta N_2$ do not exactly compensate. 

This means that there is a dipole layer with an average excess population of
$( \delta N_1 + \delta N_1)/2$ per atom in the Ge plane. The effect of this
dipole layer is to shife the average $sp^3$ level on one site with respect to
the other, i.e. to make the quantity $\Delta \neq = 0$. 

So local charge neutrality tells us that 

\[ 
\delta N_1(\Delta) + \delta N_2(\Delta) = 0
\]





**** Self-Consistent Polarisable-Ion Tight-Binding
Following cite:Paxton:153084, original paper by cite:Finnis1997.


Remember that the expansion of the Hohenburg-Kohn-Sham functional to second order in the energy, if $H = H^0 + H'$,
where $H^0$ is the Hamiltonian generated from the reference charge density $\rho^0$ (about which the HKS functional has been expanded)


#+BEGIN_EXPORT latex
\begin{align}
E^{(2)} = & \sum_{n} f_{n} \expval{H^{0}}{n} \\
&- \int \rho^{0}(\mathbf{r}) V^{0}_{xc} \text{d}\mathbf{r} - E_{H} + E^{0}_{xc} + E_{ZZ}\\
&+ \frac{1}{2} \int \text{d}\mathbf{r} \int \text{d}\mathbf{r}' \Big{ 
 e^2 \frac{\delta\rho(\mathbf{r})\delta\rho(\mathbf{r}')}{|\mathbf{r} - \mathbf{r}'|} \Big} \\
& \delta\rho(\mathbf{r})\frac{\delta^2E_{xc}}{\delta\rho(\mathbf{r})\delta\rho(\mathbf{r}')}\delta\rho(\mathbf{r}')
\end{align}
#+END_EXPORT

Where the first two lines are the /Harris-Foulkes Functional/.

This is because, as a potential changes, 

In terms of multipole moments, we cannot construct these from the charge density as we do not calculate one. 
We can however use the eigenvalues such that we can construct them. 

So we can construct the multipoles in terms of the expansion coefficients. 

#+BEGIN_EXPORT latex
\begin{equation}
Q_{\mathbf{R}L} = \sum_{L'L} \sum_{n}  f_{n} \bar{c}_{\mathbf{R}L}^{n} c_{\mathbf{R}L}^{n} 
                        \bra{\mathbf{R}L'}\hat{Q}_{\mathbf{R}L}\ket{\mathbf{R}L''}
\end{equation}
#+END_EXPORT


**** Trinkle 2006
    - Collapse problem found in tight binding if atoms come too close
      together. Electrons go in the bonding state and not the anti-bonding
      state and so the energy goes down
    - Can be fixed by implementing spline potential that levels off below a
      given cutoff, which effectively simulates a pair potential.
    - Environmentally dependent on-site terms were used instead of a pair potential.
    - These on-site energies are dependent on the local density $\rho_{i}$ and
      they have a cutoff function $f_{c}(r_{ij})$ which has fixed parameters
      $R_{0}$ and $l_{0}$.\[
      \epsilon_{i,l} = a_{l} + b_{l}\rho_{i}^{2/3} + c_{l}\rho_{i}^{4/3} +
      d_{l}\rho_{i}^{2}\] 
      \[ \rho_{i} = \sum_{j \neq i} \text{exp}\big\{ -\lambda^{2} r_{ij}
      f_{c}(r_{ij}) \big\} \]
      \[ f_{c}(r) = \frac{1}{1 + \text{exp}\Big\{  \frac{r-R_{0}}{l_{0}}\Big\}
      }\]

**** Notation

Some nice tensor notation was introduced by cite:Ballentine1986

This has a nice correspondence between the metric tensor in General Relativity
and the overlap matrix $S_{\alpha\beta}$, where it raises and lowers indices
of vectors etc. 

*** DFT
**** Hartree-Fock
    - Hartree-Fock is a method of calculating the energy of a configuration
      with exact exchange.
    - This is done by essentially putting everything we don't know into the
      kinetic energy functional. 
    - Hamiltonian is split into contributions:
      - \[\hat{H} = \hat{T} + \hat{V}_{ \text{ext} } + \hat{G}\]
      - $\hat{G} = \hat{J} - \hat{K}$
      - $\hat{J}$ is the coulombic interaction:
      - \[ \bra{ \mathbf{r} } \hat{J} \ket{ \mathbf{n} } = \int \frac{ \bra{\mathbf{r}}\ket{n} }{|\mathbf{r} - \mathbf{r'}  |}d\mathbf{r} \]
      - So \[ E_{\text{H}} = \int \frac{\rho{\mathbf{r}\rho{\mathbf{r}'}}}{|\mathbf{r} - \mathbf{r'}|}\]
      - This includes fictitious self-interaction of electron density. 
      - The Exchange functional removes this part, thus lowering the energy

    - This method is used in Hybrid DFT. This corrects band gaps mainly. But
      there are also problems.

**** Functionals
**** LMTO

*** LMTO Suite
**** TBE Pair potentials and Bond integrals
***** Pair potentials in tbe code
   - Pair potential is constructed by [[file:~/lm/tb/makvpp.f][makvpp.f]]. 
   - This calls [[file:~/lm/tb/vppder.f][vppder.f]] which actually evaluates the pair potential at that
     point
   - In makvpp.f, if in the range of $r_1 < r < r_{\text{c}}$, then
     augmentative/multiplicative polynomial is used.
     - To make this polynomial [[file:~/lm/tb/pcut45.f][pcut45.f]] is used.
     - Depending on the degree of polynomial we have this structure:
       #+BEGIN_SRC fortran
      rr = r1 - r2
      xr1 = x - r1
      xr2 = x - r2

      c = val*rr*rr
      if (n == 5) then
        pnorm = rr**(-5)
        a = (0.5d0*curv*rr - 3d0*slo)*rr + 6d0*val
        b = (slo*rr - 3d0*val)*rr
      elseif (n == 4) then
        pnorm = rr**(-4)
        a = (0.5d0*curv*rr - 2d0*slo)*rr + 3d0*val
        b = (slo*rr - 2d0*val)*rr
      p2 = pnorm*(c + xr1*(b + xr1*a))
      dp2 = pnorm*(b + xr1*2d0*a)
      ddp2 = pnorm*2d0*a
      e = p2 * xr2**(n-2)
      de = (xr2*dp2 + float(n-2)*p2) * xr2**(n-3)
      dde = (xr2*xr2*ddp2+float(2*(n-2))*xr2*dp2+float((n-2)*(n-3))*p2)
C ... e, de and dde are the values and derivatives of the polynomial in the region r1 , r < rc
       #+END_SRC
     - So the form of the polynomial used is
       - $$ P_5(x) = (x-r_2)^3 P_2(x)  $$
       - \[ P_2(x) = a(x-r1)^2 + b(x-r_1) + c \]
       - \[ a = \frac{1}{ (r1-r2)^5 } \big\{  \frac{1}{2}(r_1-r_2)^2f"(r_1) -3(r_1-r_2)f'(r_1) + 6f(r_1) \big\} \]
       - \[  b = \frac{1}{(r_1-r_2)^4} \big\{ f'(r_1)*(r_1-r_2) - 3f(r_1) \big\}  \]
       - \[ \frac{1}{(r_1 - r_2)^5} x \]
       - \[  c = \frac{ f(r_1) }{ (r_1-r_2)^3} \]
       - Where $f(x)$ is the function that needs to be cut
   - Current model has this
     #+BEGIN_SRC bash
Ti,Ti:
   type 2 (Exp. decay), V(d) = a exp (- b d)
             dds    ddp    ddd
   coeff:  -2.75   1.84  -0.46
   decay:   0.71   0.71   0.71
   cutoff type 2 (multiplicative), 5th order polynomial, range [r1, rc]
             dds    ddp    ddd
   r1:      6.20   6.20   6.20
   rc:      8.50   8.50   8.50
     
     #+END_SRC



***** Bond integrals from tbe
      - So bond integrals from titanium look like this, from this file
        [[file:~/Documents/ti/complete_titanium/ti_01-11-18/plot_bond_integrals/plot_bond_integrals.py][plot_bond_integrals.py]]
      #+CAPTION: Bond integrals with multiplicative polynomial cutoffs.
      #+NAME:   fig:tbe_bond_integrals_with_polynomial_cutoffs_multiplicative_alt.png
      [[file:~/Documents/ti/complete_titanium/ti_01-11-18/plot_bond_integrals/tbe_bond_integrals_with_polynomial_cutoffs_multiplicative_alt.png]]
      #+CAPTION: Bond integrals with multiplicative polynomial cutoffs: zoomed in.
      #+NAME:   fig:tbe_bond_integrals_with_polynomial_cutoffs_multiplicative_zoomed_in.png
      [[file:~/Documents/ti/complete_titanium/ti_01-11-18/plot_bond_integrals/tbe_bond_integrals_with_polynomial_cutoffs_multiplicative_zoomed_in.png]]

***** Bond Integrals for first neighbour interaction
    To make first neighbours it is optimal to have a cutoff that is within
    alat and $1.4 \times $ alat. This is within the next shell of 6 neighbours
    and so having the cutoff between alat and $1.2\times$ alat should be
    optimal. 
    #+CAPTION: Bond integrals with multiplicative polynomial cutoffs for first neighbour interactions: zoomed in.
    #+NAME:   fig:tbe_bond_integrals_new__with_polynomial_cutoffs_multiplicative_zoomed_in.png
    [[file:~/Documents/ti/complete_titanium/ti_01-11-18/plot_bond_integrals/check_new_cutoffs/cutoffs_at_alat_and_one_point_four_alat.png]]

**** Running lmf
***** Run Generic Calculation
   Run:
   - lmchk --getwsr ti
   - Copy the old rmax into the R category in SPEC
   - lmfa ti -vhcp=1
   - Copy basp0 to basp
   - Run lmf

*** BOP
**** Stefan Znam 2001 Thesis
***** Cauchy Pressures
    - Cauchy pressures have zero contribution from pair potentials at
      equilibrium. 
    - Generally all Cauchy pressures in many-body central force models,
      describing atoms embedded in an electron gas of the surrounding
      neighbours, are positive when experimentally they are negative.
      - This is the case with EAM and Finnis-Sinclair models.
    - In TiAl the environmental screening effects are most profound in the
      case of s and p orbital overlap repulsion, as these orbitals are being
      squeezed into the core region under the influence of unsaturated
      covalent d bonds. 
****** Reason for Cauchy Pressures
      - The reason for negative Cauchy pressures is meant to be from covalent
        character of d bonding, but when using tight binding models, which
        account for this, the cauchy pressure issue is not resolved.
      - These effects are explained in detail with regards to tight binding in
        Nguyen-Manh, Pettifor, Znam, Vitek: Negative Cauchy Pressure Within
        The Tight-Binding Approximation. 
      - This warrants the need for environmental terms:
	- The physical reasoning behind these terms are due to the repulsion
          between orbitals in the atom.
****** Why TB can't have negative Cauchy Pressures
      - TB only has contributions from the bond part of the interactions as the
        pair potential at equilibrium has no contribution to the Cauchy
        Pressures. 
      - Failure of TB to reproduce negative Cauchy pressures because the
        orbitals are tightly bound: interactions extend out only to nearest
        neighbour atoms.
      - This requires that orbitals are not \emph{unscreened} atomic
        orbitals.
      - Orbitals must be screened.
      - For transition metals, the valence d orbitals aren't screened as they are
        tightly bound anyway.
****** Thoughts: What does this mean for Tight Binding
      - As the Cauchy pressure contributions only come from the bond integrals
        and the pair potential, then the reason that some of the Cauchy
        pressures are off are because these terms might not be necessarily
        correct.
      - There are screening of these bond integrals, hence the Yukawa terms,
        which change the interaction of these bond integrals.
      - These classical environmental terms modify the elastic constants by
        including physically motivated screening terms in terms in terms of
        Ti-Al as there is some repulsion from s-p overlap, as these orbitals
        are squeezed into the core from the unsaturated d bonds.
      - These \emph{reduce} the Cauchy pressures such that they are negative
        ()
**** Environmental terms 
cite:NguyenManh2000

Analytic environment dependent terms for tight-binding bond integrals were
formulated by Nguyen-Manh. One can express a non-orthogonal tight binding
model in terms of these environmental terms. 

Orthogonal TB models which are robust and transferable require the two-center
TB parameters to be environmentally dependent. 

Environmental terms take the form of a /screening/ function $S^{ij}_{ll'\tau}$,
which is a hyperbolic tangent with argument 

\[
\xi^{ij}_{ll'\tau} = A_{ll'\tau} \sum_{k \neq i,j} exp \Big[
    - \lambda_{ll'\tau} \Big( 
              \frac{R_{ik} + R_{kj}}{R_{ij}} \Big)^{\eta_{ll'\tau}} \Big],
\]

with $l$, $l' = s$, $p$ or $d$ and $\tau = \sigma$, $\pi$ or $\delta$, with
$A$, $\lambda$ and $\eta$ as fitting parameters. 

So that the bond integrals between a pari of atoms $i$ and $j$ takes the form 

\[
\widetilde{\beta}^{ji}_{ll'\tau} = \beta_{ll'\tau}(\kappa R_{ij}) ( 1 - S^{ij}_{ll'\tau}).
\]

Starting from the /non-orthogonal/ two-center TB approximation 
\[
( H - \epsilon_{n} S  )c_{n} = 0,
\]
where this $S = \bra{i\mu lm}\ket{j\nu l'm'} = I + O$ is the nonorthogonality matrix with $O$ being the
overlap matrix. The orbitals $\ket{i\mu l}$ can be thought of already being
normalised by their local atomic environment. 

We can have an /orthogonal/ two-center TB secular equation of the form 

\[
(S^{-1}H - \epsilon_{n}I)c_{n} = 0
\]
but $S^{-1}H$ is not Hermitian and it can be expressed as the sum of
antisymmetric and symmetric terms, as it is a real matrix:

\[
S^{-1}H = \frac{1}{2} ( S^{-1}H + HS^{-1}) + \frac{1}{2}( S^{-1}H - HS^{-1})
\]

The antisymmetric contribution vanishes if, say for $s$-valent systems, we have the
Wolfsberg-Helmholtz approximation $\beta_{ss\sigma} = -AS_{ss\sigma}$ and the
approximation that all sites have the same on-site energy. 
/This is assumed to be generally true/.


Elements of $S^{-1} =  (I + O)^{-1}$ can be obtained from their BOP. Which
expresses the elements of the Green's function matrix $G(E) = (EI - H)^{-1}$
in a rapidly convergent real-space manner by imposing the physical constraint
that at any level of approximation the poles of the intersite Green's function
G_{ij} are the same as those of the averate on-site Green's function
$(1/2)(G_{ii} + G_{jj}). 


Going to /three/ recursion levels in BOP is exact for the inversion of
$3\times 3$ matrices as would be relevand fro a three-atom s-valent trimer. 

The corresponding L\:owdin expansion would hve replaced a determinant by unity
which is a poor approximation as the overlap integrals are not small. 

The central result is then 

\[
S^{ij}_{ll'\tau} = \frac{ (c^{ij})_{ll'\tau} - (\bar{\mu}_2)_{ll'\tau} +
         (\bar{\mu}_{3})_{ll'\tau} }{ 1 +  O^2_{ll'\tau}(R_{ij})  - 2(\bar{\mu}_2)_{ll'\tau} +
                               (\bar{\mu}_{3})_{ll'\tau} }
\]

where the average $p$th moment is
$\bar{\mu}_p = (1/2)(\mu^i_p + \mu^j_p)$.

The calculation asumes that the screening of the $ij$ bonds is carried out bia
the valence $s$ orbitals on the neighbouring sites $k$. 

Valence $p$ and $d$ contributions to the screening are much
weaker. All four-body contributions were neglected and the off-diagonal
elements are the same as that of the $ij$ bond of whose screening is of
interest. 

There is a large discontinuit between first and secon neighbours for the
$dd\pi$ and $dd\delta$ bond integrals but the $dd\sigma$ bond integrals are
continuous. This is because the angular dependence of the screening function
vanishes which leaves the $dd\sigma$ bond integral unscreened (due to the bond
angle in bcc). 

On the other hand the $dd\pi$ integral is heavily screened with
the slope and magnitude being reduced by a factor of 3. This is critical when
it comes to the behaviour of second-neighbour force constants and removes the
problem of the unstable T2 phonon mode at the N point that is found in most
two-center TB fits. 
**** Finite Electron Temperature
***** Gillian 1986
cite:Gillan1989

Finite electron temperature for estimation of the band energy at zero kelvin. 

The finite-temperature scheme is merely a device, whose main purpose is to
smooth discontinuities at the Fermi level.

Really want to get the ground state energy $E_0$, for small $T$ the free
energy deviates from $E_0$ by a term quadratic in $T$: $A = E_0 -
\frac{1}{2}\gamma T^2$ and that the deviation of the energy $E$ ie equal and
opposite $E = E_0 + \frac{1}{2}\gamma T^2$. Therefor the best estimate for the
ground-state energy will be $\frac{1}{2}(E + A)$ of which deviation from $E_0$
will only be $\mathcal{O}(T^3)$.

In the ground state the occupation numbers $f_{\mathbf{q}i}$ are equal to 1
for $\varepsilon_{\mathbf{q} i} < \mu$ and zero if $\varepsilon_{\mathbf{q} i}
> \mu$, where $\varepsilon_{\mathbf{q} i}$ are Kohn-Sham eigenvalues at
wavevector $\mathbf{q}$ and $\mu$ is the chemical potential (Fermi Energy
$E_F$ ).

In the case of a metal, this discontinuity of $f_{\mathbf{q}i}$ as a function
of energy is troublesome. Because of occupation numbers, the response
functions, (ASIDE: susceptibilities, linear response: think of polarisation
$\mathbf{P} = \epsilon_0 \chi_{e} \mathbf{E}$, the measure of how
polarisable a material is, or how well it /responds/ to an electric field is
$\chi$) 

\[
\chi_2^0 \approx \frac{2}{\Omega} \sum_{\mathbf{q}} w_{\mathbf{q}}\sum_{G'} 
     \frac{ f_{\mathbf{q}}^0 + G'  - f_{\mathbf{q} + G + G'}^0
     }{\varepsilon_{\mathbf{q}}^0 +  G'  - \varepsilon_{\mathbf{q} + G + G'}^0 }
\]

where $\varepsilon_{\mathbf{q} + G + G'}^0$ are non-interactng single-particle
energies and $f_{\mathbf{k}}^0$ are the associated occupation numbers. 

The point is that Brillouin zone sampling is effective with a small number of
$\mathbf{q}$-vectors only if the funciton bein sampled is smooth in
/reciprocal/ space. But because of the occupation numbers, the response
function actually becomes far from smooth and is in fact discontinuous at zero
temperature. 

There is another related reason why we get trouble. Since we cannot know the
self-consistent eigenvalues in advance, we do not know how many occupied states
there will be at each $\mathbf{q}$. As the iteration progresses to self-consistency, eigenvalues at
different $\mathbf{q}$ will generally cross each other and the Fermi energy, and this would require
a discontinuous change of occupation numbers. Such discontinuities would presumably
play havoc with the minimisation scheme. 

The solution we have adopted to these problems is to allow the $f_{\mathbf{q}i}$ to vary
continuously in the range (0, 1). This has the effect both of smoothing the sampled
function and of eliminating discontinuities due to level crossing. A convenient way of
formulating this idea is to consider the calculation formally at finite temperature, and
this is the reason for introducing the finite-temperature generalisation of
density functional theory. 

***** Horsfield 1996
cite:Horsfield1996

Used Gillian's technique cite:Gillan1989 with finite electron temperature for estimation of
the band energy at zero kelvin. 


Hamiltonian scales badly with system size $\mathcal{O}(N^3)$ for
diagonalisation. Linear scaling works well for covalent materials as the
density matrix is short ranged, but metals have had limited success other than
with some moment's methods.

Short ranged density matrices can be made short ranged with a finite electron
temperature, but leads to a weakening of the bonds, as electrons are promoted
to higher energy states, making dynamic unrealistic. 

For eletronic degrees of freedom, one can work sith the density matrix
$\hat{\rho}$. The electron internal energy, $U(T)$, electron entropy $S(T)$
and the electron free energy $A(T)$ are 

#+BEGIN_LaTeX
\begin{align}
U(T) &= 2 \text{Tr}\{ \hat{\rho} \hat{H} \} \\
S(T) &= 2 k_{\text{B}} \text{Tr}\{ s( \hat{\rho} ) \} \\
A(T) &= 2 \text{Tr}\{ \hat{\rho} \hat{H} - k_{\text{B}} T s( \hat{\rho} ) \},
\end{align}
#+END_LaTeX

where $\hat{H}$ is the Hamiltonian and $s(\hat{\rho})$ is the entropy density.

#+BEGIN_LaTeX
\begin{align}
\hat{\rho} &= f(\hat{x}) = \big[ 1 + \text{exp}(\hat{x}) \big]^{-1} \\
s(f) &= - \big[ f\text{ln}f + (1-f)\text{ln}(1-f) \big] 
\end{align}
#+END_LaTeX

where $\hat{x} = ( \hat{H} - \mu )/k_{\text{B}} T$.

We can have an approximation to the free energy calculated exactly from the
density matrix.

\[
A(0) = U_{0} \approx B(T) = A(T) + \frac{1}{2} T S(T)
\]

Defining a more general functional we have 
\[
\Phi_{\alpha}(T) = A(T) + \alpha T S(T)
\]

Taking the derivative of this with respect to position $\mathbf{r}_i$, for an
atom $i$, we get the contribution to the force, at a constant number of
electrons as 

#+BEGIN_LaTeX
\begin{align}
\Phi_{\alpha}(T) &= 2 \text{Tr}\{ f(\hat{x}) \hat{H} - (1 - \alpha) k_{\text{B}} T s( f( \hat{x} ) )  \}\\
\mathbf{F}^{(\alpha)}_{i} &= -2 \text{Tr}\Big\{ \rho_{\text{eff}}^{(\alpha)} \frac{\partial \hat{H}}{\partial \mathbf{r}_i}\Big } 
\end{align}
#+END_LaTeX

where 

\[
\langle \hat{x} \rangle = \frac{ \text{Tr}\{ \hat{x}f'(\hat{x}) \}}{
      \text{Tr}\{ f'(\hat{x}) \} }
\]
and
\[
\rho_{\text{eff}}^{(\alpha)} = [ f(\hat{x}) + \alpha ( \hat{x} - \langle
           \hat{x} \rangle ) f'(\hat{x})]
\]
 is an effective density matrix. 

$\rho_{\text{eff}}^{(0.5)}$ appears to be an optimall approximation to the
ground-state density matrix. 

This works well if the electron temperature is less than $10\%$ of the
bandwidth. 


*** Theses

**** Ab initio simulation of extended defects of Ti in presence of interstitial H and O atoms: Liang Liang
cite:liang:tel-01355132

***** Introduction

At room temperature plastic deformation is controlled by screw dislocations, and due to their 
non-planar core structure, this introduces a large Peierls stress. cite:Biget1989 ## READ ##

Due to the insufficient number independent slip systems in Ti, there is also twinning activation. 
This can generally be seen along the $\mathbf{c}$-axis and/or at low temperature. 

Oxygen has been known to decrease the mobility of screw dislocations and has hardening effects. 
It has also been thought to be responsible for dynamic strain aging. 

Definition: Dynamic strain aging
- In materials, the motion of dislocations is a discontinuous process. When dislocation meets obstacles 
  (like forest dislocations) they are temporarily arrested for a certain time. During this time solutes 
  (such as interstitial particles) diffuse around the dislocations further strengthening the obstacles
   held on the dislocations. Eventually these dislocations will overcome these obstacles with sufficient 
  stress and will quickly move to the next obstacle where they are stopped and the process can repeat. 
  This process's most well-known manifestations are Lüders bands and the Portevin–Le Chatelier effect. 
  Though the mechanism is known to affect materials without these physical observations.
- Essentially this is a jerky flow of a dislocation as the material undergoes plastic deformation.
- Generally this can happen by solutes pinning the dislocation. 

Definition: Portevin–Le Chatelier effect. 
- This is the stress-strain curve for the jerky flow of a dislocation as a material undergoes plastic deformation.
- This effect has been long associated with dynamic strain aging or the competition between diffusing solutes
  pinning dislocations and dislocation breaking free of this stoppage.

Hydrogen has been shown to lead to a softening effect and a hardening effect. The HELP 
(Hydrogen enhanced localized plasticity) mechanism has been proposed to explain the softening effect. 
Essentially it arises from hydrogen facilitating dislocation emission (dislocations leaving the material
at the edges) and glide at crack tips, thus reducing the capability for attainment of high localized
stresses in these regions. necessary for fracture. 






***** Literature Review

****** Phases and Stability
Pure titanium can be seen to exist mainly in three phases: $\alpha$ (hcp) at low temperature; 
$\beta$ (bcc) at high temperature and $\omega$ which is a hexagonal phase with three atoms per 
unit cell that is gernerally formed under high pressure.

$\gamma$ and $\delta$ phases have also been also been observed under high pressure and they are
obtained from $\omega$ phase under pressures of around 120/140 GPa respectively. These are distorted 
hcp ($\gamma$) and distorted bcc ($\delta$) structures respectively. 

Most DFT calculations generally give $\omega$ phase to be more stable that $\alpha$ phase by several 
meV per atom, at 0K.

Tonkov (1992) phase diagram gives $\omega$ to be more stable at 0K, while Zhang's (2008) gives $\alpha$ phase
to be more stable at 0K, with a transition pressure at 5GPa. So both $\alpha$ and $\omega$ can be considered 
to be metastable at 0K. 

The contribution to the Zero-point energy at 0K can play an important contribution to the stability of 
the material. It can be known to reverse phases and so phase stability should be explicitly checked
with ZPE in mind. 

#####################
Can calculate the Zero point energy if the phonon spectrum is known 
\[
ZPE = \sum_i \frac{\hslash\beta}{2}
\]
So these contributions can be included. 

Stabilty of TiO$_2$ phases by using quantum monte carlo has been done by cite:Luo2016, 
where they found that anatase was the most stable phase at low temperature, with rutile being more stable 
at higher temperature, and brookite being always the most unstable. Zero-point energies were found from 
density functional perturbation theory calculations to investigate why rutile was the more stable at finite temperature
in experiments. 

####################

****** Slip in $\alpha$-Ti

Independent slip modes within one family may not be independedt with respect to modes of other families. 

There are three families associated with $\langle \mathbf{a} \rangle$, which only provide /four/ slip systems, and 
so then to satisfy the von-Mises criterion of five independed modes for easy plastic deformation
 $\langle \mathbf{c} +  \mathbf{a}\rangle$ associated slip is required.

As this slip systen may be difficult to activate a twinning mode may be activated insead. 

| Direction                                 | Plane     | Crystallographic elements                          | Number of independent modes |
|-------------------------------------------+-----------+----------------------------------------------------+-----------------------------|
| $\langle \mathbf{a} \rangle$              | Prismatic | $\{1\bar{1}00\}  \langle 1\bar{2}10 \rangle$       |                           2 |
| $\langle \mathbf{a} \rangle$              | Basal     | $\{0001\}        \langle 1\bar{2}10 \rangle$       |                           2 |
| $\langle \mathbf{a} \rangle$              | $\pi_1$   | $\{10\bar{1}1\}  \langle 1\bar{2}10 \rangle$       |                           4 |
| $\langle \mathbf{c} +  \mathbf{a}\rangle$ | $\pi_1$   | $\{10\bar{1}1\}  \langle 11\bar{2}\bar{3} \rangle$ |                           5 |
| $\langle \mathbf{c} +  \mathbf{a}\rangle$ | $\pi_2$   | $\{11\bar{2}2\}  \langle 11\bar{2}\bar{3} \rangle$ |                           5 |
|-------------------------------------------+-----------+----------------------------------------------------+-----------------------------|
| Twinning Modes                            |           | $\{K_1\} \langle \eta_1 \rangle\$                  |                           5 |

where $K_1$ and $\eta_1$ are the twinning plane and twinning direction of a given twinning mode. 

Prismatic slip dominates. It can be seen that only after deformation of 0.43\% in T60 transverse tensile tests, that 
the $\langle \mathbf{a} \rangle$ and $\langle \mathbf{c} +  \mathbf{a}\rangle$ dislocations associated with the $\pi_1$
plane become important. (Data was obtained from Barkia's PhD Thesis 2014)

****** Stacking Faults 

******* Ghazisaeidi and Trinkle 2012
Ghazisaeidi and Trinkle cite:Ghazisaeidi2012 investigated the core structure of Ti screw dislocations, extending the work done by cite:Tarrat2009.
Tarrat /et at/ found that there are two metastable core configurations, from different initial positions of the dislocation lines. 
One of the cores is symmetrically prismatic---with the lowest excess energy---while the other shows a combination of 
prismatic and pyramidal spreading. We consider this problem to identify (a) if the existence of metastable cores is an artifact
of the boundary conditions and (b) if the cores can be easily transformed from one to the other (e.g. cross-slip or transition states).
 Using the Lattice Green's function approach, they found that found that the higher-energy core always reconstructs 
into the lower-energy one independent of the applied strain direction.


 In a hexagonal close-packed (hcp) structure, the $(10\bar{1}0)$ prism planes are separated by a/3 or 2a/3. 
Therefore, two types of prismatic stacking faults are possible: the “easy” and “hard” stacking faults which 
are created between a widely spaced or a closely spaced pair of prism planes, respectively; both appear in the dislocation core.

MEAM potentials had lower energy than DFT results. 

The mirrored (symmetric) core was lower in energy than the unmirrored (asymmetric) core. 

[[file:Images/ghazisaiedi-trinkle-scew-dislocation-core-prism-symm-asymm.png][Ghazisaeidi Trinkle core structure plots.]]
The Nye tensor plots showed the three components of spreading (screw, basal edge and prismatic edge).Partial
dislocations are identified by local extrema in the Nye tensor distribution or a closed triad of atoms in DD maps.
Unmirrored core partials have both screw and edge character and form a non-planar core structure.


| J/m$^2$ | $\gamma_{\text{easy}}$ | $\gamma_{\text{hard}}$ | $\gamma_{\text{pyramidal}}$ | $\gamma_{\text{I}2$ |
|---------+------------------------+------------------------+-----------------------------+---------------------|
| DFT     |                  0.220 |                  1.185 |                       0.689 |               0.292 |
| MEAM    |                  0.297 |                  1.495 |                       0.443 |               0.172 |

Note that the initial position of the mirrored core is located between a widely spaced pair of prism planes and exactly on a basal plane.
In this case, dislocation displacements tend to create an easy prismatic stacking fault in the core without a possibility of displacing basal planes. The low value of ceasy allows
these displacements and creates a symmetric prismatic core. On the other hand, the initial position of the unmirrored core is located between closely spaced prismatic
planes and halfway between two basal planes. Here, the dislocation displacement field induces a hard prismatic
stacking fault which requires a very high energy according to Table 1 (the table above). Therefore, a combination of a basal followed by
an easy prismatic fault creates the non-planar core.


The mirrored core is the stable configuration, even under strain. 

 We found that the mirrored core starts to move under $\epsilon_{\text{prism}} =$ 0.005 prismatic strain.
The higher-energy unmirrored core reconstructs into the lower-energy mirrored core and begins to move on 
the prismatic plane at $\epsilon_{\text{prism}} =$ 0.007. Since the unmirrored core is non-planar, we also 
put the cores under strain pyramidal on the pyramidal plane for testing purposes. The mirrored core begins 
to slip on the prism plane under $\epsilon_{\text{pyramidal}} =$ 0.005 pyramidal strain. At 
$\epsilon_{\text{pyramidal}} =$ 0.012 the unmirrored core transforms into the mirrored one again and
starts to slip on the prism plane. For completeness, we applied basal strains basal to the cores as well. 
The mirrored core starts to move along prismatic planes at $\epsilon_{\text{basal}} =$ 0.012 and the 
unmirrored core again transforms into the mirrored one under $\epsilon_{\text{basal}} =$ 0.015 and moves on
prismatic planes. This suggests that the mirrored core is the ground state and is the dominant core configuration,
even under stress. The unmirrored core is not expected to impact the mechanical behavior of Ti; it appears to be a
metastable artifact of relaxing the dislocation from the initial displacements of anisotropic elasticity theory for a perfect dislocation.

******* 






** Dislocations
*** Dislocation arrays
   Dislocation arrays are used within simulation cells to negate the effects of
   the long range strain fields produced from dislocations in the periodic array
   of cells one has in the simulation.
   - Method of Clouet: Dislocation locking versus easy glide in titanium and
     zirconium. cite:Clouet2015 
     - Introduced two dislocations into the simulation cell
     - This formed a quadrupolar periodic array of dislocations which
       minimises the elastic interaction between dislocations and their
       images.
     - This is because of the centrosymmetry of the Volterra elastic field,
       which means that the stress of this quadrupolar array ensures that the
       stress field created by the periodic image dislocations cancels locally
       at each dislocation position, thus limiting the perturbation of the
       dislocation core by the boundary conditions.
     - Arrangement is the same as the "S" arrangement found in
       cite:Clouet2012 

**** Files to produce dislocations
***** Single Dislocations
     Here are the files used to produce single dislocations
     [[file:~/Documents/disl_gsurf/useful_python/bop/dislocations/create_dislocations/gen_prismatic_screw_tbe.py][Generate prismatic screw]] [[file:~/Documents/disl_gsurf/useful_python/bop/dislocations/create_dislocations/test/generated_dislocations/site.ti_9x_9y_8z_square_1_dislanis_prim_rot_convert.xyz][Ovito file ]]
     [[file:~/Pictures/prismatic_screw_tbe_full_anis.png][prismatic screw from ovito ]]
***** Quadrupolar arrangements

**** Bulatov and Cai: Computer simulations of dislocations

***** Sum of displacements from dipoles
     Simulating dislocation dipoles will introduce singularity in displacement
     between them. As we are not in the continuous case, this singularity is
     fine. However, the periodic boundary conditions are *not* satisfied,
     \emph{i.e.} pair of dislocations forming a dipole will not be periodic
     along y, as the displacement field is not periodic along y. 

     This mismatch could relax away during energy minimization, but it is not
     guaranteed. 

     A naive way to try and remove this result is to try and construct a
     periodic displacement field from the non-periodic one generated, by the
     principle of linear superposition, but this does not work. 
     \[ u_{z}^{\text{sum}} = \sum_{\mathbf{R}} u_{z}^{\inf}(\mathbf{r}
     -\mathbf{R}) = u_{z}^{\inf}(\mathbf{r}) + u_{z}^{\text{img}}(\mathbf{r})
     \]
     \[  u_{z}^{\text{img}}(\mathbf{r}) = \sum_{\mathbf{R}}' u_{z}^{\inf}(\mathbf{r}
     -\mathbf{R}) \]

     where $\mathbf{R}$ is a periodic vector of the two dimensional lattice
     vectors along $x$ and $y$ axes: $\mathbf{R} = n_{1}\mathbf{c}_1 +
     n_{2}\mathbf{c}_2$.
     $u_{z}^{\text{img}}(\mathbf{r})$ only accounts for *image* dipoles
     ($\mathbf{R}\neq 0$)
     whereas the other sum is the sum of all of them. 
     This is because the sum of the displacements is /conditionally
     convergent/. This means that the ordering of the sum of the displacements
     will determine if the sum actually converges.

***** How to remove non-periodic displacements
     One can find the periodic displacement $u_{z}^{text{PBC}}(\mathbf{r})$
     from the relation, which arises from the fact that
     $\partial_{i}\partial_{j}u_{z}^{\text{sum}}(\mathbf{r}) = \partial_{i}\partial_{j}u_{z}^{\text{PBC}}(\mathbf{r})$
     \[ u_{z}^{text{sum}}(\mathbf{r}) =  u_{z}^{text{PBC}}(\mathbf{r}) +
     \mathbf{s}\cdot\mathbf{r} + \mathbf{u}_{0} \]
     $\mathbf{u}_{0}$ is a constant term, so it can be ignored. 

     Recipe to remove the spurious non-periodic part of the displacement field:
     1. Evaluate the conditionally convergent sum
        $u_{z}^{\text{sum}}(\mathbf{r})$, using an arbitrary truncation. 
     2. "Measure" the linear spurious part of the resulting field, using the
        equation below, by comparing it's values at four points in the
        periodic supercell from the above equation 
	\[ u_{z}^{\text{err}}(\mathbf{r}) =  \mathbf{s}\cdot\mathbf{r},  \]
        \[ u_{z}^{\text{sum}}(\mathbf{r} + \mathbf{c}_{i})  -
        u_{z}^{\text{sum}}(\mathbf{r}) = \mathbf{s}\cdot\mathbf{c}_{i}, \]
	where $i=1,2$.
     3. Finally, subtract the linear term $u_{z}^{\text{err}}(\mathbf{r})$ from
        $u_{z}^{\text{sum}}(\mathbf{r})$ to obtain the corrected solution
        $u_{z}^{\text{PBC}}(\mathbf{r})$.

	
     This procedure is independent of the truncation in the limit of large
     radius.

***** Adjusting the shape of the supercell
     When a dislocation dipole is introduced, there is a plastic strain that
     is generated. 
     \[ \epsilon^{\text{pl}} = \frac{1}{2\Omega}( \mathbf{b} \otimes
     \mathbf{A} + \mathbf{A} \otimes \mathbf{b} ), \]
     where $\Omega = (\mathbf{c}_{1} \times \mathbf{c}_{2}) \cdot
     \mathbf{c}_{3}$, and $\mathbf{A}$, is the vector normal to the plane of
     the plane connecting the dipoles and $\mathbf{c}_{i}$ are the periodicity vectors. 

     In a supercell with fixed periodicity vectors, an increment in the
     plastic strain will be compensated by an oppositely signed increment of
     the elastic strain of the same magnitude: $\epsilon^{\text{el}} = -
     \epsilon^{\text{pl}}$.

     In response to this elastic strain, there will be an internal
     /back-stress/ acting to eliminate the source of the strain (i.e. the
     dislocation dipole). This back-stress may be large enought to push the
     dislocations back from their intended positions and may even lead to
     dislocation recombination. 

     Allowing for the simulation box to change shape during relaxation, one
     would see that it could reach a state of zero average internal stress. 
     We can do this step *before relaxation*, such that we can accomodate/match the
     *plastic strain* produced by the dislocation dipole.

     In the case study, the cut plane bounded by two dislocations is parallel
     to two of the repeat vectors, $\mathbf{c}_{1}$ and $\mathbf{c}_{3}$. In
     this case the internal stress induced by the dipole can be removed by
     adjusting only the $\mathbf{c}_{2}$ repeat vector. 

     \[ \mathbf{c}_{2} \rightarrow \mathbf{c}_{2} + \mathbf{b} \frac{A}{A_{0},} \]

     If we say that $A_{0} = | \mathbf{c}_{3} \times \mathbf{c}_{1} |$ is the area of simulation box on the plane
     parallel to the dislocation dipoles, and $A$ is the area that is between
     the dislocation dipoles in the simulation cell. 

     Adjusting this vector means that we have added an extra term
     $\mathbf{u}_{z}^{\text{tilt}}(\mathbf{r})$ to the solution of
     $\mathbf{u}_{z}^{\text{PBC}}(\mathbf{r})$ from before. 
     In this study, it is 
     \[ u_{z}^{\text{tilt}}(\mathbf{r}) = b \frac{Ay}{A_{0}c_{2}}, \]
     where $c_{2}$ is the length of the periodicity vector before it has been
     tilted. 

**** Results

For dipole in the O arrangement we have [[file:~/Documents/disl_gsurf/useful_python/bop/dislocations/create_dislocations_clean/create_supercell_with_quadrupole.py]]

Original displacement in O config
 [[file:Images/u_dipole_O_arrangement_non_periodic_displacement.png]]
Adding in the contribution of the images
[[file:Images/u_image_dipole_O_arrangement.png]]
Subtracting from $u_{\text{sum}}$, the spurious linear displacement:
[[file:Images/u_err_dipole_O_arrangement.png]]
Resulting in the final periodic displacement for the supercell. 
[[file:Images/u_dipole_O_arrangement_periodic_displacement.png]]

** Phonons, Elastic Constants and Stability
*** Phonons 

**** DFT and TBE Phonons
The phonons and q points for the fitting using LDA are here
[[file:~/Documents/swarm_fit_ti/phonons_and_strain_derivatives/test_phonopy_conf/dft_results/dft_ctrl_files/from_init/phonon_frequency_calc/hcp_lmf/hcp-band_dos_dft.pdf]]
Q point frequencies at M and H are 
#+BEGIN_SRC python
- q-position: [    0.0000000,    0.0000000,    0.5000000 ]
  band:
  - # 1
    frequency:    2.8585871860
  - # 2
    frequency:    2.8585871860
  - # 3
    frequency:    2.8585871860
  - # 4
    frequency:    2.8585871860
  - # 5
    frequency:    5.6670604683
  - # 6
    frequency:    5.6670604683

- q-position: [    0.3300000,    0.3300000,    0.0000000 ]
  band:
  - # 1
    frequency:    4.8064342322
  - # 2
    frequency:    5.5801002486
  - # 3
    frequency:    5.6531673769
  - # 4
    frequency:    6.3665184154
  - # 5
    frequency:    6.4005018626
  - # 6
    frequency:    7.6408237318

#+END_SRC

*** Elastic constants and Force constant matrix
**** Wallace
***** Crystal Potential: Introduction
     - Since the vibrational energy of a crystal is generally considered to by
       small compared to its potential energy, the crystal potential is a first
       approximation to the free energy or the internal energy.
     - Ions are labelled by the letters $M$ and $N$.
     - Equilibrium positions are given by the vectors $\mathbf{R}(M)$ and
       displacements from equilibrium are denoted by $\mathbf{U}(M)$.
     - Potential energy of the crystal due to interactions among ions in a
       given configuration is given by $\Phi$, which can be expanded as
       \begin{align}
       \Phi = \Phi_{0} &+ \sum_{M}\sum_{i} \Phi_{i}(M)U_{i}(M) \\ 
            &+ \frac{1}{2}\sum_{MN}\sum_{ij}\Phi_{ij}(M,N)U_i(M)U_j(N)\\ 
            &+ \frac{1}{3!} \sum_{MNP}\sum_{ijk}\Phi_{ijk}(M,N,P)U_{i}(M)U_{j}(N)U_{k}(P) \\
            &+ \frac{1}{4!} \sum_{MNPQ}\sum_{ijkl}\Phi_{ijkl}(M,N,P,Q)U_{i}(M)U_{j}(N)U_{k}(P)U_{l}(Q) + \dots \\
       \end{align}
     - $\Phi_{i}(M) = \frac{\partial \Phi}{\partial U_{i}(M)}$
     - $\Phi_{ij}(M) = \frac{\partial^{2} \Phi}{\partial U_{i}(M)U_{j}(N)}$
     - These are symmetric in their index pairs; \emph{i.e.} $\Phi_{ij}(M,N) = \Phi_{ji}(N,M)$
     - All of the coefficients are functions of the \emph{initial} configuration.
     - This potential is supposed to represent the \emph{entire} energy of the crystal
       except for the kinetic energy of the ions.
     - From now on $M, N$ represent the unit cell and $\mu, \nu$ represent the
       individual ions in a given cell.
     - The total potential of the system plus externally applied forces is
       $\Psi$. For a virtual process where the crystal is deformed while the
       externally applies forces are held constant $\Psi$ is not conserved, if
       the forces are changed then it can be conserved. 
       \begin{align}
       \Psi = \Psi_{0} &+ \sum_{M}\sum_{i}[\Phi_{i}(M) - f_i(M)]U_{i}(M)\\
            &+ \frac{1}{2}\sum_{MN}\sum_{ij}\Phi_{ij}(M,N)U_i(M)U_j(N) \dots
       \end{align}
***** Stability and the Dynamical Matrix
     - The equilibrium configuration of ions and external forces is a stable
       equilibrium if the total system potential is minimum with respet to
       small virtual displacements of the ions from equilirium.  
     \[\Psi = \Psi_{0}+
     \frac{1}{2}\sum_{MN}\sum_{ij}\Phi_{ij}(M,N)U_i(M)U_j(N) + \dots \]
     - The stability condition is if they are positive definite: positive for
       any of the values $U_{i}(M)$, except if they are all 0.
     - The stability condition is:
       \[ \sum_{\alpha \beta} \Phi_{\alpha\beta}U_{\alpha}U_{\beta} > 0 \]
     - $\alpha$, $\beta \dots$ are indices which refer to the pair  $Mi$ and
       $>0$ means positive definite (all the eigenvalues are greater than zero).
     - This is only satisfied if the matrix $\Phi_{\alpha\beta}$ is positive definite
*** Inner Elastic constants
   This is a file which is to evaluate the elastic constants in both relaxed and unrelaxed configurations
   According to cite:Clouet2012 and cite:Cousins1979, in a strained hcp lattice there are internal degrees of freedom
   that are not accounted for when applying a homogeneous strain.
   This is necessary for $C_{11}$, $C_{12}$ and $C_{66}$ elastic constants.
   Two of these inner elastic constants, $e_{11}$, $e_{11}$, are related to the phonon frequencies of the optical branches at the gamma point.
   \[\omega_i = 2  \sqrt{ \Omega  e_{ii} / m }\]
   Where $\Omega = a^2  c  \sqrt{3} / 2$ (The atomic volume), and $m$ is the mass
   The inner elastic constants $d_{21}$ couples the internal degrees of freedom to the homogeneous strain, leading to a contribution:
   \[\delta C_{12} = d_{21}^2 / e_{11}\]
   $C^0_{ij}$ are the unrelaxed elastic constants
   The true elastic constants are then given by 
   $C_{11} = C^0_{11} - \delta C_{12}$ 
   $C_{12} = C^0_{11} + \delta C_{12}$ 
   $C_{66} = C^0_{66} - \delta C_{12}$ 
   With all others being unchanged 

**** Sutton
Can express the elastic constants as 
\[ C_{ijkl} = \frac{\partial^2 E}{\partial e_{ij}\partial e_{kl}} \]
And also we can express them as 
\[ C_{ikjl} = -\frac{1}{2\Omega} \sum_{p\neq n} \big( X_k^{(p)} - X_k^{(n)} \big) S_{ij}^{(np)}  \big( X_l^{(p)} - X_l^{(n)}  \big)  \]

And to respect the symmetries of the crystal we have 
\begin{align}
 C_{ikjl} = -\frac{1}{8\Omega}  \Big\{ 
    &\sum_{p\neq n}\big( X_k^{(p)} - X_k^{(n)} \big) S_{ij}^{(np)}  \big( X_l^{(p)} - X_l^{(n)}  \big) \\
  + &\sum_{p\neq n}\big( X_i^{(p)} - X_i^{(n)} \big) S_{kj}^{(np)}  \big( X_l^{(p)} - X_l^{(n)}  \big) \\
  + &\sum_{p\neq n}\big( X_k^{(p)} - X_k^{(n)} \big) S_{il}^{(np)}  \big( X_j^{(p)} - X_j^{(n)}  \big) \\
  + &\sum_{p\neq n}\big( X_i^{(p)} - X_i^{(n)} \big) S_{kl}^{(np)}  \big( X_j^{(p)} - X_j^{(n)}  \big)  \Big\},
\end{align}
where $\Omega$ is the volume of the primitive unit cell and
\[ S_{ij}^{(np)} =  \frac{\partial E}{\partial u_i^{(n)} \partial u_j^{(p)} } \]

If there is more than one atom associated with each lattice site, 
those atoms not on lattice sites may undergo small displacements in addition to those prescribed by the homogeneous strain.
These additional displacements are sometimes called the 'internal strain'. 
Although the strain is stil imposed by displacing atoms at lattice sites, atoms between lattice sites will expreience 
net forces as a result of the strain if they are not at centres of inversion. 
Relaxation of those forces reduces the energy of the homogeneously strained crystal, and therefore it affects the calculated elastic constants. 
*** Notes on Thermodynamics and Stability

**** Wallace 1972
    - For hexagonal materials, there are general stability requirements:
      * $C_{11} - C_{12} > 0$
      * $C_{11} + C_{12} + C_{33} > 0$
      * $( C_{11} + C_{12} ) C_{33} - 2C_{13}^{2} > 0$
      * $C_{44} > 0$
      * $C_{66} = \frac{1}{2}(C_{11} - C_{12}) > 0$
      * $( C_{11} + C_{12} )C_{33} > 0$
      * $C_{11} + C_{12} > 0$
      * $C_{33} > 0$
      * $C_{11} > 0$
    - The equilibrium configuration of ions plus external forces is a stable
      equilibrium if the total system potential $\Psi$ is minimum with respect
      to small virtual displacements of dions from equilibrium.
    - Cauchy relations (at least in the cubic case) will be destroyed if
      non-central forces are included in the crystal potential.

**** Fast, Will, Johansson: Elastic constants in hexagonal transition metals

***** Cauchy Relations
     - Cauchy relations for hexagonal materials:
       - $C_{13} = C_{44}$
       - $C_{12} = C_{66} = \frac{1}{2}(C_{11} - C_{12})$
     - These only are meant to hold for central forces.
     - These Cauchy forces have been shown to hold more in hexagonal materials
       rather than cubic ones.
     - In cubic materials sometimes one finds $C_{44}$ four times smaller than
       $C_{12}$.
     - They showed the Cauchy ratios:
       - $C_{12}/C_{66}$
       - $C_{13}/C_{44}$
     - The Cauchy relations were close to 1 apart from calculations with Co, Zr and
       Ti, where it was closer to 2.
     - These are smaller than the $3/4$ times deviations in cubic crystals.
       
***** Normalised elastic constant
       - To investigate Cauchy relations fully they used a normalised elastic constant which
       	 was obtained by dividiing by the bulk modulus: $C'_{ij} = C_{ij}/B$
       - It becomes easier to study trends as one is normlising the
         interatomic forces with an average restoring force of the system,
         when dividing by the bulk modulus.
       - Suggest that the hexagonal materials are quite isotropic. 

**** Calculation of elastic constants by various means
***** Calculation by derivative of energy with strain  
One way to calculate the elastic constants is to take derivatives of the elastic energy density with respect to strain
\[ C_{ijkl} = \frac{1}{2}\frac{\partial E}{ \partial e_{ij} \partial
e_{kl} } \]
****** Results
******* Correct Strain Derivative
Initially it was thought that checking if the 9x9 matrix of elastic constants was positive definite was enough
to ascertain the stability of the crystal, but it seems that acutally all of the stability criteria
are satisfied and that actually it is the 6x6 elastic constant matrix that needs to be positive definite,

However Phonopy does still get soft modes at gamma and so it is perplexing why this might be happening. 
Phonopy might be interfering with the crystal symmetry.
There are two eigenvalues from the 9x9 matrix that are usually the same and negative, so this might be a reason
as to why there is a soft mode, but this is uncertain. One may have to construct the dynamical matrix by hand. 

I'd argue that taking the derivatives is quite accurate. We reproduce c44, the only one of tony's set of strains
that is symmetric about zero strain, within a few percent (34.9 from derivative to 38.1 GPa from the fifth order polynomial).
Using a second order routine of $h=0.001$ we obtain:
#+BEGIN_SRC python 

# Full matrix :

  156.2634    62.2392    55.7344    -0.0000     0.0000     0.0000     0.0000    -0.0000     0.0000
   62.2392   156.4112    55.5866    -0.0000     0.0000     0.0000     0.0000    -0.0000     0.0000
   55.7344    55.5866   157.1504     0.0000     0.0000     0.0000     0.0000     0.0000     0.0000
   -0.0000    -0.0000     0.0000    34.8894     0.0000     0.0000    34.8894     0.0000     0.0000
    0.0000     0.0000     0.0000     0.0000    32.8198     0.0000     0.0000    34.8894     0.0000
    0.0000     0.0000     0.0000     0.0000     0.0000    47.0120     0.0000     0.0000    47.0120
    0.0000     0.0000     0.0000    34.8894     0.0000     0.0000    32.8198     0.0000     0.0000
   -0.0000    -0.0000     0.0000     0.0000    34.8894     0.0000     0.0000    34.8894     0.0000
    0.0000     0.0000     0.0000     0.0000     0.0000    47.0120     0.0000     0.0000    47.0120

With eigenvalues:

272.3589+0.0000j 103.3698+0.0000j 94.0963+0.0000j 94.0240+0.0000j 68.7593+0.0000j 68.7593+0.0000j -1.0501+0.0000j -1.0501-0.0000j 0.0000+0.0000j

So the matrix is not positive definite although it satisfies the stability criteria

C_11 156.2634
C_33 157.1504
C_44 34.8894
C_12 62.2392
C_13 55.7344

C_11 - C_12 > 0 
 True
 C_11 + C_12 + C_33 > 0 
 True
( C_11 + C_12 ) * C_33 - 2 * C_13**2 > 0 
 True
C_44 > 0 
 True
(C_11 - C_12) > 0
 True
( C_11 + C_12 )*C_33 > 0 
 True
C_11 + C_12 > 0
  True
C_33 > 0
 True
C_11 > 0
 True

#+END_SRC

The aforementioned actually has bzjob=1...
Letting bzjob=0 we have very slightly different results 
#+BEGIN_SRC python
C_11 156.55906025190512
C_33 157.15040703252774
C_44 34.88946007560986
C_12 62.091411998201686
C_13 55.58659740765988
#+END_SRC


Using a fourth order mixed derivative we have a similar story:

#+BEGIN_SRC python

  156.2100    62.2926    55.8206    -0.0000     0.0000     0.0000     0.0000    -0.0000    -0.0329
   62.2926   156.3496    55.5784    -0.0000     0.0000    -0.0575     0.0000    -0.0000    -0.0575
   55.8206    55.5784   157.1464     0.0000     0.0000     0.0287     0.0000     0.0000     0.0287
   -0.0000    -0.0000     0.0000    34.7662     0.0000     0.0000    34.8976     0.0000     0.0000
    0.0000     0.0000     0.0000     0.0000    32.7048     0.0000     0.0000    34.8976     0.0000
    0.0000    -0.0575     0.0287     0.0000     0.0000    46.8970     0.0000     0.0000    46.8970
    0.0000     0.0000     0.0000    34.8976     0.0000     0.0000    32.7048     0.0000     0.0000
   -0.0000    -0.0000     0.0000     0.0000    34.8976     0.0000     0.0000    34.7580     0.0000
   -0.0329    -0.0575     0.0287     0.0000     0.0000    46.8970     0.0000     0.0000    46.8970

With eigenvalues
  272.4062   103.3167    93.9916    93.7855    -0.0000    -1.1813    -1.1773    68.6483    68.6441

so the matrix is not positive definite

C_11 - C_12 > 0 
 True
 C_11 + C_12 + C_33 > 0 
 True
( C_11 + C_12 ) * C_33 - 2 * C_13**2 > 0 
 True
C_44 > 0 
 True
(C_11 - C_12) > 0
 True
( C_11 + C_12 )*C_33 > 0 
 True
C_11 + C_12 > 0
  True
C_33 > 0
 True
C_11 > 0
 True

#+END_SRC

With bzjob=0 we have
#+BEGIN_SRC python
C_11 156.68225749754902
C_33 157.08880840888514
C_44 34.88946007629375
C_12 62.12426459729613
C_13 55.64408945578736
#+END_SRC
with none of the spurious off diagonal terms. 
******* Miscellaneous
These are the results for the model from December by tony. 
#+BEGIN_SRC bash 

Elastic constant matrix Ryd/AA**3:
 [[2.2272  0.27192 0.80071 0.16768 0.      0.72153 0.0575  0.17501 0.     ]
 [0.27192 0.49531 0.10444 0.      0.10815 0.      0.02675 0.      0.     ]
 [0.80071 0.10444 1.15753 0.00964 0.      0.      0.21149 0.31484 0.00912]
 [0.16768 0.      0.03253 0.67398 0.      0.      0.      0.04262 0.0558 ]
 [0.      0.10815 0.      0.      0.3322  0.08569 0.      0.61174 0.     ]
 [0.64789 0.      0.      0.      0.06787 0.51815 0.00377 0.      0.11769]
 [0.0575  0.04526 0.19313 0.05313 0.      0.00377 0.7419  0.      0.     ]
 [0.13481 0.      0.35608 0.04262 0.77688 0.      0.      2.24564 0.     ]
 [0.      0.      0.00912 0.0558  0.      0.      0.0053  0.01619 0.0823 ]]


#+END_SRC

This seems to be a quite noisy method... 
Using the amplitude of the strains as $h=0.001$ to calculate the mixed
derivatives we have:
#+BEGIN_SRC python
array([[122.3759,   5.5439,  43.119 ,   6.1599,  16.0156,  65.2945,   6.1599,  14.5783,   3.0799],
       [  5.5439,  12.1144,   0.    ,   0.    ,   5.9545,   0.    ,  10.6771,  13.141 ,   5.9545],
       [ 43.119 ,   0.    , 131.8211,  35.3165,   0.    ,  28.3354,   0.    ,   0.    ,   0.    ],
       [  6.1599,   0.    ,  32.4419,  21.9702,   0.    ,   8.8291,   0.    ,   0.    ,   0.    ],
       [  0.    ,   5.9545,   0.    ,   0.    ,   4.5172,   2.8746,   2.8746,  39.8338,   1.6426],
       [ 57.492 ,   0.    ,  28.3354,   8.8291,   1.232 ,   0.    ,  14.989 ,  29.362 ,   0.    ],
       [  6.1599,   0.    ,   5.7492,   0.    ,   2.8746,  14.989 ,  20.3275,   0.    ,   0.    ],
       [ 14.5783,  13.141 ,   0.    ,   0.    ,  35.1112,  29.362 ,   0.    , 326.8834,   1.232 ],
       [  4.7226,   4.3119,   0.    ,   0.    ,   1.6426,   0.    ,   0.    ,   0.4107,   0.    ]])

>>> np.linalg.eigvals( ect )
array([336.8415, 194.2468,  93.2178, -30.711 ,  20.7759,  16.3516,  12.3729,  -1.8979,  -1.188 ])

#+END_SRC
Using fourth order mixed derivatives for the strain:
#+BEGIN_SRC python
array([[ 133.05,  14.784,  56.055,  17.453,  2.6693e+00,  3.2647e+01, -1.2320e+00, -1.0266e+01, -4.1066e-01],
       [ 14.784,  32.853,  8.8292, -28.746,  2.2176e+01, -9.1184e-09, -1.2320e+00, -1.1498e+01, -1.7658e+01],
       [ 56.055,  8.8292,  76.588, -1.4373,  1.6632e+01, -2.0944e+01,  1.7864e+01,  1.0472e+01,  2.8495e-10],
       [ 17.453, -2.8746, -1.4373,  43.940, -1.0472e+01, -1.7658e+01, -1.1909e+01, -3.2853e+00, -4.5172e+00],
       [ 2.6693,  22.176,  16.632, -10.472,  25.255,  1.0266e+01, -2.6282e+01,  5.5849e+01, -1.0061e+01],
       [ 32.647,   1e-9,   -20.944, -17.658,  1.0266e+01,  43.119,  1.8522e-08,  4.5172e+00,  7.3918e+00],
       [-1.2320, -1.2320,  17.864, -11.909, -2.6282e+01,  1.8522e-08,  57.492, -5.4412e+01, -2.8495e-10],
       [-10.266, -11.498,  10.472, -3.2853,  5.5849e+01,  4.5172e+00, -5.4412e+01,  133.05, -2.0533e-01],
       [-0.4106, -17.658,  1e-10, -4.5172, -1.0061e+01,  7.3918e+00, -2.8495e-10, -2.0533e-01,  27.103e+01]])

array([[ 133.05,  14.784,  56.055,  17.453,  0,    0,    0,    0,    0],
       [ 14.784,  32.853,  8.8292, -28.746,  0,    0,    0,    0,    0],
       [ 56.055,  8.8292,  76.588, -1.4373,  0,    0,    0,    0,    0],
       [ 17.453, -2.8746, -1.4373,  43.940,  0,    0,    0,    0,    0],
       [ 2.6693,  22.176,  16.632, -10.472,  25.255,  0,    0,    0,    0],
       [ 32.647,   1e-9,   -20.944, -17.658,  1.0266e+01,  43.119,   0,    0,    0],
       [-1.2320, -1.2320,  17.864, -11.909, -2.6282e+01,  1.8522e-08,  57.492,  0,    0],
       [-10.266, -11.498,  10.472, -3.2853,  5.5849e+01,  4.5172e+00, -5.4412e+01,  133.05,  0],
       [   0,      0,      0,      0,      0,      0,      0,      0,     27.103e+01]])

#+END_SRC
***** Calculation using fifth order polynomials 
****** Results: December 2018
******* Applied Strains in code
[[file:Images/tony_real_strains_2018_12_22.png]]
#+BEGIN_SRC python
 Elastic Constants: Tony Strains


 C11 =  165.8231485457,   C11_exp =  176.1000000000 
 C33 =  164.5632628633,   C33_exp =  190.5000000000 
 C44 =  38.1494487390,    C44_exp =  50.8000000000  
 C66 =  207.5028445231,   C66_exp =  44.6000000000  
 C12 = -249.1825405004,   C12_exp =  86.9000000000  
 C13 = -273.1296728747,   C13_exp =  68.3000000000  
 K   = -1094.6742125447,  K_FR    =  109.9666666667 
 R   =  669.1429126353,   R_FR    =  61.8000000000  
 H   =  634.1671283357,   H_FR    =  45.9650000000  
#+END_SRC

[[file:Images/girshick_real_strains_2018_12_22.png]]

#+BEGIN_SRC python
 Elastic Constants: Girshick Routine Applied Strains 


 C11 =  165.8623476695,   C11_exp =  176.1000000000 
 C33 =  164.5632628633,   C33_exp =  190.5000000000 
 C44 =  38.1796557562,    C44_exp =  50.8000000000  
 C66 =  51.8860924371,    C66_exp =  44.6000000000  
 C12 = -10383.7435816516, C12_exp =  86.9000000000  
 C13 = -9548.9999553500,  C13_exp =  68.3000000000  
 K   =  93.6545272856,    K_FR    =  109.9666666667 
 R   =  55.7940512318,    R_FR    =  61.8000000000  
 H   =  52.8336415119,    H_FR    =  45.9650000000  
#+END_SRC

******* Applied Strains in tbe 

Girshick 

[[file:Images/girshick_tbe_strains_2018_12_22.png]]
#+BEGIN_SRC python
 C11 =  165.8623476695,   C11_exp =  176.1000000000
 C33 =  164.5632628633,   C33_exp =  190.5000000000
 C44 =  38.1796557562,   C44_exp =  50.8000000000
 C66 =  51.8860924371,   C66_exp =  44.6000000000
 C12 = -10383.7436103689,   C12_exp =  86.9000000000
 C13 = -9548.9962292795,   C13_exp =  68.3000000000
 K =  93.6561928893,   K_exp =  109.9666666667
 R =  55.7940512318,   R_exp =  61.8000000000
 H =  52.8336415119,   H_exp =  45.9650000000

#+END_SRC

[[file:Images/tony_tbe_strains_2018_12_22.png]]
#+BEGIN_SRC python
 C11 =  165.8231485457,   C11_exp =  176.1000000000
 C33 =  164.5632628633,   C33_exp =  190.5000000000
 C44 =  38.1494487390,   C44_exp =  50.8000000000
 C66 =  207.5028445231,   C66_exp =  44.6000000000
 C12 = -249.1825405004,   C12_exp =  86.9000000000
 C13 = -273.1296728747,   C13_exp =  68.3000000000
 K = -1094.6742125447,   K_exp =  109.9666666667
 R =  669.1429126353,   R_exp =  61.8000000000
 H =  634.1671283357,   H_exp =  45.9650000000 

#+END_SRC


****** Unordered Results
[[file:Images/girshickstrains.png]]
#+BEGIN_SRC python
 C11 =  173.9155276479,   C11_exp =  176.1000000000
 C33 =  147.9542064528,   C33_exp =  190.5000000000
 C44 =  69.6511083920,   C44_exp =  50.8000000000
 C66 =  46.6885793926,   C66_exp =  44.6000000000
 C12 = -10950.9356585199,   C12_exp =  86.9000000000
 C13 = -9302.3428901998,   C13_exp =  68.3000000000
 K =  86.0339496031,   K_FR =  109.9666666667
 R =  47.9671492728,   R_FR =  61.8000000000
 H =  74.5803389724,   H_FR =  45.9650000000
#+END_SRC




[[file:Images/girshicktbestrains.png]]

#+BEGIN_SRC python
 C11 =  165.8623476701,   C11_exp =  176.1000000000
 C33 =  164.5632628639,   C33_exp =  190.5000000000
 C44 =  38.1796557563,   C44_exp =  50.8000000000
 C66 =  51.8860924373,   C66_exp =  44.6000000000
 C12 = -10383.7436104020,   C12_exp =  86.9000000000
 C13 = -9548.9962293122,   C13_exp =  68.3000000000
 K =  93.6561928893,   K_FR =  109.9666666667
 R =  55.7940512319,   R_FR =  61.8000000000
 H =  52.8336415120,   H_FR =  45.9650000000

#+END_SRC

[[file:Images/tonystrains.png]]
#+BEGIN_SRC python
 C11 =  294.0060923538,   C11_exp =  176.1000000000
 C33 =  147.9542064528,   C33_exp =  190.5000000000
 C44 =  127.6805919606,   C44_exp =  50.8000000000
 C66 =  284.0959508096,   C66_exp =  44.6000000000
 C12 = -274.1858092654,   C12_exp =  86.9000000000
 C13 = -283.8196185256,   C13_exp =  68.3000000000
 K = -947.6837014728,   K_FR =  109.9666666667
 R =  725.5035850482,   R_FR =  61.8000000000
 H =  820.5917855837,   H_FR =  45.9650000000

#+END_SRC

[[file:Images/applied_tony_strains.png]]
#+BEGIN_SRC python


 C11 =  3439.0436276515,   C11_exp =  176.1000000000
 C33 =  3704.2209613709,   C33_exp =  190.5000000000
 C44 =  4786.2106820819,   C44_exp =  50.8000000000
 C66 =  4676.2088087745,   C66_exp =  44.6000000000
 C12 = -5913.3739898976,   C12_exp =  86.9000000000
 C13 = -5235.9381795662,   C13_exp =  68.3000000000
 K = -22188.1924813862,   K_FR =  109.9666666667
 R =  12938.9321393802,   R_FR =  61.8000000000
 H =  13756.2028545877,   H_FR =  45.9650000000

#+END_SRC
[[file:Images/tonytbestrains.png]]
#+BEGIN_SRC python
 C11 =  165.8231485464,   C11_exp =  176.1000000000
 C33 =  164.5632628639,   C33_exp =  190.5000000000
 C44 =  38.1494487394,   C44_exp =  50.8000000000
 C66 =  207.5028445236,   C66_exp =  44.6000000000
 C12 = -249.1825405007,   C12_exp =  86.9000000000
 C13 = -273.1296728744,   C13_exp =  68.3000000000
 K = -1094.6742125423,   K_FR =  109.9666666667
 R =  669.1429126355,   R_FR =  61.8000000000
 H =  634.1671283369,   H_FR =  45.9650000000 

#+END_SRC


****** Girshick Routines
This was done by using the methods implemented by Girshick 
#+BEGIN_SRC python
 C11 =  174.6582002879,   C11_exp =  176.1000000000
 C33 =  148.5838047109,   C33_exp =  190.5000000000
 C44 =  69.8223407219,   C44_exp =  50.8000000000
 C66 =  46.7301800073,   C66_exp =  5586.2392851153
 C12 = -10997.8203699426,   C12_exp =  86.9000000000
 C13 = -9342.8091038253,   C13_exp =  68.3000000000
 K =  85.9105417657,   K_FR =  109.9666666667
 R =  48.5317889633,   R_FR =  61.8000000000
 H =  74.1393560210,   H_FR =  45.9650000000 

#+END_SRC
Implementing them using the tbe methods we have 
#+BEGIN_SRC python
 C11 =  165.8623476701,   C11_exp =  176.1000000000
 C33 =  164.5632628639,   C33_exp =  190.5000000000
 C44 =  38.1796557563,   C44_exp =  50.8000000000
 C66 =  51.8860924373,   C66_exp =  44.6000000000
 C12 = -10383.7436104020,   C12_exp =  86.9000000000
 C13 = -9548.9962293122,   C13_exp =  68.3000000000
 K =  93.6561928893,   K_FR =  109.9666666667
 R =  55.7940512319,   R_FR =  61.8000000000
 H =  52.8336415120,   H_FR =  45.9650000000
#+END_SRC
[[file:Images/tbe_routine_girshick_strains.png]]

****** Tony Routines
With tony's routines we have 
#+BEGIN_SRC python
 C11 =  165.8231485464,   C11_exp =  176.1000000000
 C33 =  164.5632628639,   C33_exp =  190.5000000000
 C44 =  38.1494487394,   C44_exp =  50.8000000000
 C66 =  207.5028445236,   C66_exp =  44.6000000000
 C12 = -249.1825405007,   C12_exp =  86.9000000000
 C13 = -273.1296728744,   C13_exp =  68.3000000000
 K = -1094.6742125423,   K_FR =  109.9666666667
 R =  669.1429126355,   R_FR =  61.8000000000
 H =  634.1671283369,   H_FR =  45.9650000000
#+END_SRC

** Mechanics of Crystals
**** Phase transformations
***** Diffusive Transformations
The martensitic transformation is very different to the movement of atoms by
/diffusive/reconstructive transformations/. 

Diffusive transformations generally arise from the diffusion of a vacancy
through the material. On repeated movement through the material, the atoms
change from their original positions. (Think of one of those puzzles with one
empty square and you can slide pieces along and you have to make the Mona Lisa or
something, it is scrambled from it's original state so it's structure is different.)

This can change the neighbours of atoms (which is incredibly important in
alloys)/. 

***** Diffusionless Transformations
Nice paper from cite:Christian1995 on this, which is actually where the
diagram below comes from. 

In martensitic transformations, the atoms move by
 /displacive transformations/.

A diffusionless transformation is a phase change that occurs without the
long-range diffusion of atoms but rather by some form of cooperative, 
homogeneous movement of many atoms that results in a change in crystal 
structure. These movements are small, usually less than the interatomic
 distances, and the atoms maintain their relative relationships. 

Shuffles, as the name suggests, involve the small movement of atoms within the
unit cell. As a result, pure shuffles do not normally result in a shape change
of the unit cell - only its symmetry and structure. 

[[file:Images/Diffusionless_classification.svg][Diagram of hierarchy of diffusionless phase transformations]]

Lattice-distortive displacements can have an undistorted line, e.g. parallel
to a pure shear, or dilatational. 

Bain strains are homogeneous lattice-distortive strains that transform one
Bravais lattice into another one. 

Shuffles involve the small moveement of atoms and so they do not normally
result in a shape change of the unit cell---only its symmetry and structure. 

Phase transformations normally result in the creation of an interface between
the transformed and parent material. 
The energy required to generate this new interface will depend on its
nature---essentially how well the two structures fit together. There is an
additional energy term, if the transformation includes a shape change,
if the new phase is constrained by the surrounding material, this may give
rise to  elastic or plastic deformation and hence a strain energy term. 

The ratio of interfacial and strain energy terms has a notable effect on the
kinetics of the transformaton and the morphology of the new phase. Thus,
shuffle transformations, where distortons are small, are dominated by
interfacial energies and can be usefully separated from lattice-distortive
transformations where the strain energy tends to have a greater effect. 

Lattice-distortive displacements can be split into subclasses if the
transformations are dominated by a shear component: where there is an
undistorted line. If there is not an undistorted line then the strain energy
is dilatational dominant. If the strain energy is a significant factor in shear
transformations compared to the innate vibrations of the lattice, 
then it is dubbed as a /martensitic/ transformation, and if not
then the transformation is /quasi-martensitic/.

** Gamma surfaces

*** Literature Review

**** General notes on dislocations
     - Dislocations have areas of tension (distance between atoms is larger
       than the lattice vector) and compression (distance is less than the
       lattice vector)
     - A reasonable value for the dislocation core radius r0 therefore lies in the range $\mathbf{b}$ to $4\mathbf{b}$, i.e. $r_0 \geq 1 nm$ in most cases.

**** How do stacking faults occur?
     Stacking faults can occur:
     - During crystal growth
     - As part of other defects (e.g. dislocations)
     - As evolution of other defects.
       * There can be vacancy agglomeration, such that there is a vacancy
         disk, creating a stacking fault if the disk is large enough for the
         two surfaces to collapse together.
       * Example of this is that these vacancy disks condense and are then
         bordered by an edge dislocation. 
     
**** Types of stacking faults.
     - Disk of vacancies: \emph{intrinsic} stacking fault.
     - Interstitial agglomeration: \emph{extrinsic} stacking fault.
     - Both are bordered by an edge dislocation.
       * These are \emph{partial} dislocations.
       * In fcc these are Frank partials of burgers vector $\mathbf{b} =
         \pm \frac{a}{3}\langle 111\rangle$

***** Types of stacking faults in hcp
      - Intrinsic 1 ($I_1$) = (ABAB|CBCB) -- Basal plane
      - Intrinsic 2 ($I_2$) = (ABAB|CACA) -- Basal plane
      - Extrinsic ($I_{\text{E}}$) = (ABAB|C|ABAB) -- Basal plane
      - Easy prismatic $F_{1} = \mathbf{b} / 2$
	- This energy corresponds to a true metastable stacking fault but has
          only been seen in the case of DFT so far. 

**** Partial dislocations
     - Partial dislocations \emph{must} be bordered by a two dimensional
       defect: usually a stacking fault.
       * (Think of double ended pencil slice, where dislocation lines are the
	 border of the pencil and the plane is the stacking fault.)
     - Shockley dislocations:
       * Cut and weld but don't fill in (to finish full Volterra procedure.)
       * Produce intrisic stacking fault.
       * These can glide on the same plane as the perfect dislocation, and can
         also change length.
       * Frank partials bound loop and so can only move on their glide
         cylinder. Changing length would involbe apsorption or emission of
         point defects. 

**** Energy considerations with stacking faults and partials. 
     - Have energy gain from splitting into two smaller burgers vectors
     - Interaction energy of two partials will be large at smaller distances
     - but also, stacking fault energy is per unit length, so this would
       minimise the distance
     - So have an equilibrium distance between the partials.
     - This makes dislocations like ribbons that stretch through the material.
     - These ribbons can undergo constrictions from jogs
     - Reason that stacking faults are not observed in bcc structures are just
       that the stacking fault energies are too high. (Because of dense packing?)
**** Gamma surfaces in DFT
***** [Benoit, Tarrat and Morillo 2012] cite:Benoit_2012 Density functional theory investigations of titanium $\gamma$-surfaces and stacking faults. 
     - Comparison between central force  embedded atom ineractions, N-body
       central force, N-body angular, empirical potentials, tight binding and
       DFT pseudopotential and DFT full electron calculations.
     - Cauchy pressures are deemed to due to be N-body effects but really for Cauchy
       pressures that are accurate one needs a volume-dependent energy term
       which makes elastic constant contributions. **Needs more investigation**
     - Legrand suggests that there is an energetic favouring of the prismatic
       plane for these stacking fault energies due to the directional covalent
       d-orbital bonding in transition metals.
     - He also suggested a ratio to measure this \[ R = \frac{\gamma_{b}/C_{44}}{\gamma_{p}/C_{66}} \].
     - Suggests that large fitting database of configurations far from the
       ideal hcp lattice might provide accurate reproduction of dislocation
       core structure.
     - Not systematic improvement going from N-body central force potentials
       to TB.
     - Inversion in strength between $C_{66}$ and $C_{44}$ in the BOP
       calculations of Girshick and Pettifor
       - So it was stipulated that the N-body effects of this model were not
         well accounted for.
     - Free surfaces were introduced into the slab geometry to avoid problems
       of asymmetric configuration of stacking faults in periodic images.
     - Oscillations in the stacking fault energy with the number of slabs are
       due to quantum size effects.
     - Underestimation of the energy of basal faults and overestimation of the
       prismatic easy excess energy lead to an inversion between the basal and
       prismatic easy faults in terms of energetic preference. This was also
       seen in the BOP model.  
       - Not sure how this works. The Cauchy pressure was fitted to in certain
         BOP models. Maybe this was only used in Stefan Znam's case and not
         any others. It would be interesting to see if his model stands up
         against this criteria.
     - No models other than DFT produced a metastable stacking fault energy at
       the prismatic easy fault.
***** Ising Model Gamma surfaces
****** Hu 2013 Basal plane stacking faults of hcp metals.
cite:Hu2013

Stackng faults are closely related to two deformation modes of metals: twinning
and glide of dislocations. 

A deformation twin is generated directly by the formation of a stacking fault,
and the mobility of a dislocation is highly pertinent to the stackinf fault
energy. 
A lower stacking fault energy makes dislocation cross-slip and climb
difficult. 

Basal SFE of Ti in experiment is close to $0.31 Jm^{-2}$, but in EAM by Zope
and Mishin cite:Zope2003 is far lower than this. 

In the Ising model, the SFE is expressed in terms of the interlayer
interaction energies, which can be exracted from the total energies of several
small size prototypes. 
cite:Denteneer1987

Denteneer gave these energies 
#+BEGIN_LaTeX
\begin{align}
E_{fcc} = J_0 - J_1 &- J_2 - J_3 &- J_4 - O(J_4) \\
E_{hcp} = J_0 + J_1 &- J_2 + J_3 &- J_4 + O(J_4) \\
E_{dhcp}= J_0       &+ J_2       &- J_4 + O(J_4) \\
E_{spt} = J_0 - \frac{1}{3}J_1 &+ \frac{1}{3}J_2 + J_3 &+ \frac{1}{3}J_4 + \ldots \\
\end{align}
#+END_LaTeX

****** Denteneer 1987 Stacking-fault energies in semiconductors from first-principles calculations
cite:Denteneer1987

Denteneer /et al/ calculated the stacking fault energies of SiC and Ge using a procedure
based on the observation that 
1. Stacking faults are the limiting structures of polytypes
2. There exists a systematic parametrisation of the energies of polytypes in
   terms of interactions constants between layers. 

Polytypes differ in the way that planes of atoms are stacked. Atoms in one
plane are arranged in equilateral triangles which offer A-, B- and C-type
positions. 

/Intrinsic/ and /extrinsic/ stacking faults are achieved by the /removal/ or
/insertion/ of one layer into the infinite ideal stacking sequence
respectively. 
So the intrinsic stacking fault (ISF) may be represented as the limiting
structure of a polytype with repeat unit [of SiC] as $ABCBC(ABC)^n,
n=0,1,2,\ldots$ consisting of $N$ layers ($N=5,8,11,14,\ldots$) in the limit
$\N \rightarrow \inf$. 
The extrinsic stacking fault may be represented as the polytype with repeat
unit  $ABAC(ABC)^m, m=0,1,2,\ldots$ consisting of $M$ layers
($M=4,7,10,13,\ldots$) in the limit $\M \rightarrow \inf$. 

Polytypic behaviour could be described using and axial next-nearest-neighbour
Ising model (ANNNI), where the analogue of the Ising spin $S_i$ for layer $i$
has a value $+1$ or $-1$ depending on whether or not the layer with inted
$i+1$ conorms to the ideal stacking sequence. 

This means that a layer $A$ has $S_i = +1$ if the layer with the index $i+1$
as a $B$ layer and $S_i = -1$ if the layer with index $i-1$ is a $C$ layer
etc. 

So, by extension of thei sthe energy of an arbitrary polytype is parametrised
as follows:

#+BEGIN_LaTeX
\[
E = E_{0} - J_{1} \sum_{i} S_{i} S_{i+1} - J_{2}\sum_{i} S_{i}S_{i+2} - J_{2}\sum_{i} S_{i}S_{i+3} - \ldots
\]
#+END_LaTeX

where the summations are over layers. 

The parameters $J_n$, ($n=0,1,2,3,\ldots$) by be interpreted as interaction
energies between two layers that are nearest neighbours ($J_1$) or
next-nearest neighbours ($J_2$) etc. $E_0$ is the energy contribution common
to all polytypes with results if all interactions between layers are
disregarded.

It is expected that all the $J_n$ decrease in magnitude for increasing $n$, in
the ANNNI description all $J_n$ with $n /ge 3$ are neglected. 

Here are some examples with energies of polytypes with different repeat units

#+BEGIN_LaTeX
\begin{align}
&ABC     &E = J_0 - J_1 &- J_2 - J_3 &- J_4 - \ldots \\
&AB      &E = J_0 + J_1 &- J_2 + J_3 &- J_4 + \ldots \\
&ABCB    &E = J_0       &+ J_2       &- J_4 + \ldots \\
&ABCACB  &E = J_0 - \frac{1}{3}J_1 &+ \frac{1}{3}J_2 + J_3 &+ \frac{1}{3}J_4 + \ldots \\
\end{align}
#+END_LaTeX

So then the intrinsic and extrinsic stacking faults are
#+BEGIN_LaTeX
\begin{align}
&ISF(N)     &E = J_0 - \frac{N-4}{N}J_1 &- \frac{N-4}{N}J_2 - \frac{N-4}{N}J_3 &- \frac{N-4}{N}J_4 - \ldots \\
&ISF(M)     &E = J_0 - \frac{M-4}{M}J_1 &- \frac{M-8}{M}J_2 - \frac{M-8}{M}J_3 &- \frac{M-8}{M}J_4 + \ldots 
\end{align}
#+END_LaTeX

by definition we have 

$$ \lim_{N\rightarrow \inf} 3N[ E(ISF(3N)) - E(ABC) ] $$
$$ \lim_{M\rightarrow \inf} 3N[ E(ESF(3M)) - E(ABC) ] $$

so 
#+BEGIN_LaTeX
\begin{align}
&E_{ISF}     &E = 4J_1 + 4J_2 + 4J_3 + 4J_4 + \ldots \\
&E_{ESF}     &E = 4J_1 + 8J_2 + 8J_3 + 8J_4 + \ldots 
\end{align}
#+END_LaTeX

Stacking fault energies $\gamma_{ISF/ESF}$ are then obtained by dividing this
energy by $\frac{1}{4} a_c^2 \sqrt{3}$, which is the area of a hexagon that
defines the unit cell in one layer, if $a_c$ is the lattice constant of the
corresponding zincblende unit cell. 





*** Miscellaneous
   - Seems like some atoms are missing in the site file when it is being read
     in to tbe.
   - This means that there are some erroneous forces that make the program
     exit.
     - SOLUTION: Coordinates were not in units of alat.
*** Relaxing in tbe
**** Notes on how to invoke relaxation
    - To relax in tbe need to modify:
      - Ewald tolerance: ewtol
	- This can generally be set quite low: 1d-14
      - Convergence criteria:
	- gtol: The tolerance in the force for convergence e.g. 1d-8
	- xtol: The tolerance in the atomic positon e.g. 1d-8.
**** Using Tony's cell for gamma surfaces. 
#+BEGIN_SRC python
        plat = np.array([[0.,           -1.,   0.],
                         [3**(0.5)/2.,  0.5,   0.],
                         [0.,           0.0,   q ] ] )
        
        X_n = np.array([0., 0., 0.])
        X_p = np.array( [ 1./(2. * 3**(0.5) ), -0.5, q/2. ] )

        # In this configuration, we have
        # 1/3[1-210] == -[010]
        # 1/2[10-10] ==  [100]
        # So for basal stacking fault using this cell, we need to use combinations of vectors [0-10] and [3**(0.5), -0.5, 0]
#+END_SRC
*** Convergence and k-points in tbe
    - Tony used a $30\times 30\times 30$ grid for the k-point mesh.
    - Making a square cell, and increasing the length accordingly, one must
      reduce the number ok k-points in that direction.
    - Making a square cell with an increase of cell size along x to be
      $\sqrt{3}$, then we must reduce the k-point mesh by $n_{\text{kx}} /
      \sqrt{3} \approx 17.3 \approx 17$
    - Therefore new grid is $17 \times 30 \times 30$

| hcp cell type | Geometry | tetra | n atoms | nkx | nky | nkz | Maximum force | Total energy per atom | Band energy per atom | Pair pot. energy per atom |
|---------------+----------+-------+---------+-----+-----+-----+---------------+-----------------------+----------------------+---------------------------|
| Primitive     |    1x1x1 |     0 |       2 |  30 |  30 |  30 |      0.000000 |           -0.28614958 |          -0.93606433 |                0.18636598 |
| Primitive     |    1x1x1 |     1 |       2 |  30 |  30 |  30 |      0.000001 |           -0.28614745 |          -0.93606220 |                0.18636599 |
| Primitive     |    2x1x1 |     0 |       4 |  15 |  30 |  30 |      0.000001 |           -0.28614836 |          -0.93606433 |                0.18636599 |
| Primitive     |    2x1x1 |     1 |       4 |  15 |  30 |  30 |      0.000511 |           -0.28614581 |          -0.93606056 |                0.18636599 |
| Primitive     |    4x2x8 |     0 |     128 |   8 |  15 |   4 |      0.000061 |           -0.28615991 |          -0.93607466 |                0.18636599 |
| Primitive     |    4x2x8 |     1 |     128 |   8 |  15 |   4 |      0.000118 |           -0.28615978 |          -0.93607452 |                0.18536599 |
| Primitive     |    4x2x8 |     0 |     128 |   9 |  15 |   4 |      0.000063 |           -0.28614977 |          -0.93606452 |                0.18636599 |
| Basal Square  |    1x1x1 |     0 |       4 |  16 |  30 |  30 |      0.000065 |           -0.28614681 |          -0.93606156 |                0.18636599 |
| Basal Square  |    1x1x1 |     0 |       4 |  17 |  30 |  30 |      0.000064 |           -0.28615864 |          -0.93607339 |                0.18636599 |
| Basal Square  |    1x1x1 |     0 |       4 |  18 |  30 |  30 |      0.000043 |           -0.28614481 |          -0.93605956 |                0.18636599 |
| Basal Square  |    1x1x1 |     0 |       4 |  19 |  30 |  30 |      0.000054 |           -0.28615677 |          -0.93607152 |                0.18636599 |
| Basal Square  |    1x2x8 |     0 |      64 |  15 |  15 |  30 |      0.000083 |           -0.28615743 |          -0.93606721 |                0.18636599 |
| Basal Square  |    1x2x8 |     0 |      64 |  16 |  15 |  30 |      0.000020 |           -0.28614599 |          -0.93606074 |                0.18636599 |
| Basal Square  |    1x2x8 |     0 |      64 |  17 |  15 |  30 |      0.000061 |           -0.28615547 |          -0.93607022 |                0.18636599 |
| Basal Square  |    1x2x8 |     0 |      64 |  18 |  15 |  30 |      0.000057 |           -0.28614492 |          -0.93605967 |                0.18636599 |
| Basal Square  |    1x2x8 |     0 |      64 |  15 |  15 |   4 |      0.000065 |           -0.28615784 |          -0.93607259 |                0.18636599 |
| Basal Square  |    1x2x8 |     0 |      64 |  16 |  15 |   4 |      0.000028 |           -0.28614667 |          -0.93606014 |                0.18636599 |
| Basal Square  |    1x2x8 |     0 |      64 |  17 |  15 |   4 |      0.000044 |           -0.28615651 |          -0.93607126 |                0.18636599 |
| Basal Square  |    1x2x8 |     0 |      64 |  18 |  15 |   4 |      0.000052 |           -0.28614359 |          -0.93605834 |                0.18636599 |
| Basal Square  |   1x2x10 |     0 |      80 |  15 |  15 |   3 |      0.000087 |           -0.28615445 |          -0.93606920 |                0.18636599 |
| Basal Square  |   1x2x10 |     0 |      80 |  16 |  15 |   3 |      0.000065 |           -0.28614681 |          -0.93606156 |                0.18636599 |
| Basal Square  |   1x2x10 |     0 |      80 |  17 |  15 |   3 |      0.000064 |           -0.28615864 |          -0.93607343 |                0.18636599 |
| Basal Square  |   1x2x10 |     0 |      80 |  18 |  15 |   3 |      0.000052 |           -0.28614359 |          -0.93605834 |                0.18636599 |
Less precise c/a below. 
|---------------------+-------+---------+-----+-----+-----+---------------+-----------------------+----------------------+---------------------------|
| Basal Square  1x1x1 |     0 |       4 |  18 |  30 |  30 |      0.000043 |           -0.28614662 |          -0.93605957 |                0.18636601 |
| Basal Square  1x1x1 |     1 |       4 |  18 |  30 |  30 |      0.000097 |           -0.28614928 |          -0.93606369 |                0.18636601 |
| Basal Square  1x1x1 |     0 |       4 |  17 |  30 |  30 |      0.000064 |           -0.28615864 |          -0.93607342 |                0.18636601 |
| Basal Square  1x1x1 |     1 |       4 |  17 |  30 |  30 |      0.000024 |           -0.28615254 |          -0.93606731 |                0.18636601 |
| Basal Square: 2x2x8 |     0 |     128 |   9 |  15 |   4 |      0.000052 |           -0.28614359 |          -0.93605835 |                0.18366000 |
| Basal Square: 2x2x8 |     1 |     128 |   9 |  15 |   4 |      0.000121 |           -0.28614669 |          -0.93606145 |                0.18636600 |
| Basal Square: 1x1x8 |     0 |      32 |  17 |  30 |   4 |      0.000044 |           -0.28615651 |          -0.93607127 |                0.18636600 |
| Basal Square: 1x1x9 |     0 |      36 |  17 |  30 |   4 |      0.000058 |           -0.28615716 |          -0.93607192 |                0.18636600 |
| Basal Square: 1x1x9 |     0 |      36 |  17 |  30 |   3 |      0.000071 |           -0.28615681 |          -0.93607157 |                0.18636600 |

*** Results
    - Have now done the gamma line along $1/3[1\bar{2}10]$, but the end points
      do not seem quite right.
    - File and data: [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/data/plot_hsbc_pkl.py][basal_energy_plotting]] [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/data/gamma_line_along_1-210_wrong_endpoints.png]]
    - Basal plot $8\times 8\times 8$
    - [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/data/supercell_8-8-8/Figures/gamma_surface_8-8-8_basal_tbe.png][Basal Plane gamma surface]]
    - [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/data/supercell_8-8-8/plot_hsbc_pkl.py][plot_hbgs]], [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/data/supercell_8-8-8/hgsBte888.pkl][energy]], [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/data/supercell_8-8-8/hgsBtx888.pkl][x]], [[file:~/Documents/disl_gsurf/hcp_pris_screw/hcp_relaxed_pris_screw/gamma_surfaces/data/supercell_8-8-8/hgsBty888.pkl][y]]
      

*** Results: December 2018
With Tony's new model we have gamma surfaces which are reasonable. 
[[file:Images/basal_gamma_surface_2018-12-18.png]]
[[file:Images/prismatic_gamma_surface_2018-12-18.png]]
[[file:Images/pyramidal_plane_gamma_surface_07-01-18_Ready.png]]
 
Apart from the pyramidal plane which seems erroneous
[[file:Images/wrongpyramidalgammasurftbe.png]]

With the prismatic gamma surface, there is no apparent splitting in
halfway along the $1/3[1\bar{2}10]$ direction, which does not bode
well for the model. 

The basal gamma surface is still a bit off-kilter. This must be
rectified. 

** Optimisation
*** Multi-objective optimisation

**** Solutions
Solutions to multi-objective optimisations are members of the Pareto
set.
Dominance is the concept of how a particular vectors of inputs may be
compared with respect to graphs of particular objectives and how each
vector minimises each. So pairs of vectors can be compared.

- a dominates b if it is better in at least one objective and worse in
  none. We write $a \succ b$.
  a weakly dominates b if it dominates b or is equal to b. We also
  write $a \succeq b$.
- a strongly dominates b if it is strictly better than b in all objectives. We also write
  $a \succ\succ  b$.
- a is incomparable to b if neither a nor b dominates the other, and they are not equal
  to one another. We write $a || b$.
NOTE: $a \succ\succ b \implies a \succ b \implies a \succeq b$

There is partial ordering as some points will dominate others with
respect to one objective but not necessarily the other. 

**** Pareto Optimality
The Pareto Front $Z^*$of an objective space is the set of nondominated
points of an objective space $Z$: $Z^{*} = \text{min}(Z)$

The Pareto Optimal set $X^*$ of a decision/search space $X$ is the
pre-image of the Pareto front. (Basically the input vectors map to the
Pareto front, the set of points which minimise objectives).

Can define better relations on sets of points  by saying that some
sets of points are objectively better than others 
$A \rhd B \Leftrightarrow \text{min} A \cup B = A \neq B$.
For other pairs it is a matter of preference.

When a point $x^*$ is Pareto optimal, there exist vectors 
$mathbf{0}\leq \mathfrak{R}^{k}$ and $mathbf{0}\leq \mathfrak{R}^{m}$
for which $(\lambda,\mu) \neq (\mathbf{0}, \mathbf{0})$ such that
\[ \sum_{i=1}^{k} \lambda_{i} \Delta f_{i}(x^*) + \sum_{j=1}^{m}
\lambda_{j} \Delta g_{i}(x^*) = 0, \]
\[ \mu_j g_j(x^*) = 0 \forall j = 1,\ldots,m, \]
where $k$ are objectives and $m$ are equality constraints, $f_i$ are
the objective function and $g_j$ are the constraint functions.





**** Differential Evolution Algorithms

Evolutionary Algorithms have proven to be very effective in dealing
with hard optimization problems whose solution space is so large as
to make an exhaustive search unviable. 

Main disadvantage to Differential Evolution algorithms is their
convergence speed. 

To increase this convergence speed, one may implement structured
versions of the algorithm where the population is split into
semi-isolated subpopulations (demes) which are connected to each other
using a particular network topology. 

These subpopulations evolve independently and interact by means of a
migration operator that is used to exchange individuals. 

The number of individuals that are sent to/received from other demes
is determined by the migration rate, while a replacement function
defines how ti include the immigrants into the target subpopulation. 

The migration interval establishes the exchange frequency among
neighbouring subpopulations. 

Network topologies may be categorised as either the \emph{island
model} (fully connected demes) or the \emph{stepping-stone model},
(interaction is restricted to customized logical or physically
connected demes).  

The connectivity degree of the topology beneath determines
the number of the neighboring subpopulations and its diameter is the
most important factor influencing the propagation of good individuals.

The separation of demes serves as a natural way to maintain the diversity
reducing the possibility of population stagnation, may guide the evolution
in many directions simultaneously, and may allow speedup in computation and
improve solution quality with respect to a single EA evolution.

***** Topology
In or
*** Notes on Titanium Model
**** Pair correlation and cutoffs
    - Analysing the pair correlation function in ovito, it seems reasonable
      that one should have cutoffs, if $ a = 2.95 $ and $ c = 4.683$ to give a
      $c/a = 1.587$, of 4.7$\AA$, as this is past the third neighbour
      distance.
    - This was done in Znam's thesis.
    - At the moment we are cutting off at $8.5 ryd$, which gives the
      neighbours to be 20, so we are actually not including a multiple of the
      coordination for the neighbour table, which may give a weird structure
      by symmetry.
    - Another reason is that in the model for Titania, the Ti-Ti integrals
      were given a longer cutoff to stabilise the rutile and anatase
      structures. 
    - The TB Iron model has a cutoff which is twice the lattice parameter. 

*** Titanium tight-binding models
**** Tigany's Models
***** 2019-01-16  
Just looking at a model that the optimisation on tar spat out.
#+BEGIN_SRC python
START: OBJECTIVE FUNCTION

ti_obj_new_ec_cutoffs_canon.py 
 starting..
   ext = ti ,
   file = fmin.val ,
   vals = fdd=0.1737703199 qdds=0.5706158058 qddp=0.6421834099 qddd=0.7560903882 b0=278.8444422514 p0=1.7961642354 b1=0.0000000000 p1=0.0000000
000 ndt=1.9624397374 cr1=-6.9348461726 cr2=4.0612686987 cr3=-1.0000000000 r1=0.9819448403 rc=1.3464870767 rmaxh=1.3599519474  
   binaries in /opt/lmto/bld7.13.0/openmpi/3.1.0/intel/14.0.1/o



Getting hcp c/a ...
Using Nelder-Mead

Optimization terminated successfully.
         Current function value: -0.333512
         Iterations: 29
         Function evaluations: 60
Got a, c : a=5.5401081318, c=8.9583629249 c/a=1.6170014577. Volume per atom=119.0599707593
Targets  : a=5.5767896900, c=8.8521008200 c/a=1.5873112152. Volume per atom=119.2107777334

Obtaining Bandwidth 

  eval 1 for bandwidth = -0.1587
  eval 2 for bandwidth = 0.129
bandwidth: 0.288 (target: 0.426)

Getting hcp shear constants ...

 C_11 =    177.624 GPa

 C_33 =    191.588 GPa

 C_44 =     46.334 GPa

 C_12 =     88.164 GPa

 C_13 =     67.996 GPa

shear constants: c_11=177.6, c_33=191.6, c_44= 46.3, c_12= 88.2, c_13= 68.0, c_66=  44.7, S= 68.7, R=188.5, H=147.8 
         target: c_11=176.1, c_33=190.5, c_44= 50.8, c_12= 86.9, c_13= 68.3, c_66=  44.6, S= 73.1, R=185.4, H=146.7 
   bulk modulus: 111; target: 110 

Obtaining bcc Ti quantities

  trial bcc output from pfit = 0.0
  VF = 0.943542
  Epp bcc = 0.491615

Getting omega phase lattice constants and internal parameter ...

Using Nelder-Mead

Optimization terminated successfully.
         Current function value: -0.498206
         Iterations: 38
         Function evaluations: 81

Got omega : a=8.7091, c=5.4026 c/a=0.6203, u=1.0001. Volume per atom=118.2943
Targets   : a=8.7325, c=5.3234 c/a=0.6096, u=1.0000. Volume per atom=117.1878
E_omega - E_hcp = 0.687mRy per atom 
      GGA Target: -0.735
bcc:     a=  6.08, K=57 Volume per atom=112
target:  a=  6.18, K=118,                     
        E_bcc - E_hcp = 19.358mRy per atom 


 Build Objective Function
     ...with L1 norm
                    predicted       target      squared diff.        p_norm         weight       objective
  a_hcp       :   5.54010813     5.57678969     0.00134554       0.03668156     1000.00000000       38.02709489 
  c_hcp       :   8.95836292     8.85210082     0.01129163       0.10626210     1000.00000000      117.55373983 
  c_11        : 177.62375172   176.10000000     2.32181932       1.52375172       1.00000000        3.84557104 
  c_33        : 191.58842280   190.50000000     1.18466418       1.08842280       1.00000000        2.27308698 
  c_44        :  46.33439251    50.80000000    19.94165025       4.46560749       1.00000000       24.40725774 
  c_12        :  88.16405241    86.90000000     1.59782850       1.26405241       1.00000000        2.86188091 
  c_13        :  67.99572101    68.30000000     0.09258571       0.30427899       1.00000000        0.39686470 
  a_omega     :   8.70914358     8.73254342     0.00054755       0.02339984     250.00000000        5.98684832 
  c_omega     :   5.40260729     5.32343103     0.00626888       0.07917626     250.00000000       21.36128389 
  u_omega     :   1.00009549     1.00000000     0.00000001       0.00009549     500.00000000        0.04774897 
  DE (o, hcp) :   0.68707833    -0.73475386     2.02160678       1.42183219       1.00000000        3.44343897 
  a_bcc       :   6.08183509     6.17948863     0.00953621       0.09765354     500.00000000       53.59487776 
  bandwidth   :   0.28770000     0.42600000     0.01912689       0.13830000     1000.00000000      157.42689000 

Objective function: 431

#+END_SRC

Here are the phonons:
[[file:~/Documents/phonopy/ti-phonons/2019-01-16-TiganyModel/hcp/hcp-band_dos.pdf][hcp phonons 2019-01-16]]
[[file:~/Documents/phonopy/ti-phonons/2019-01-16-TiganyModel/omega/omega-band_dos.pdf][omega phonons 2019-01-16]]
[[file:~/Documents/phonopy/ti-phonons/2019-01-16-TiganyModel/bcc/bcc-band_dos.pdf][bcc
phonons 2019-01-16]]
***** 2019-01-16 gherkin
#+BEGIN_SRC python
START: OBJECTIVE FUNCTION

ti_obj_new_ec_cutoffs_canon.py 
 starting..
   ext = ti ,
   file = fmin.val ,
   vals = fdd=0.0612208622 qdds=0.3902890045 qddp=0.4649455926 qddd=0.5756575714 b0=254.7932729989 p0=1.8871236540 b1=0.0000000000 p1=0.0000000
000 ndt=1.9510574036 cr1=-6.4416591804 cr2=3.6704407936 cr3=-1.0000000000 r1=0.9680179778 rc=1.3439860367 rmaxh=1.3574258970  
   binaries in /opt/lmto/bld7.13.0/openmpi/3.1.0/intel/14.0.1/o



Getting hcp c/a ...
Using Nelder-Mead

Optimization terminated successfully.
         Current function value: -0.340763
         Iterations: 31
         Function evaluations: 62
Got a, c : a=5.5326800768, c=8.8578811280 c/a=1.6010109034. Volume per atom=117.4090570706
Targets  : a=5.5767896900, c=8.8521008200 c/a=1.5873112152. Volume per atom=119.2107777334

Obtaining Bandwidth 

  eval 1 for bandwidth = -0.1401
  eval 2 for bandwidth = 0.1151
bandwidth: 0.255 (target: 0.426)

Getting hcp shear constants ...

 C_11 =    177.759 GPa

 C_33 =    188.157 GPa

 C_44 =     52.311 GPa

 C_12 =     89.739 GPa

 C_13 =     64.932 GPa

shear constants: c_11=177.8, c_33=188.2, c_44= 52.3, c_12= 89.7, c_13= 64.9, c_66=  44.0, S= 74.3, R=192.0, H=147.0 
         target: c_11=176.1, c_33=190.5, c_44= 50.8, c_12= 86.9, c_13= 68.3, c_66=  44.6, S= 73.1, R=185.4, H=146.7 
   bulk modulus: 109; target: 110 

Obtaining bcc Ti quantities

  trial bcc output from pfit = 0.0
  VF = 0.903835
  Epp bcc = 0.574544

Getting omega phase lattice constants and internal parameter ...

Using Nelder-Mead

Optimization terminated successfully.
         Current function value: -0.506159
         Iterations: 39
         Function evaluations: 81

Got omega : a=8.6332, c=5.3331 c/a=0.6177, u=1.0000. Volume per atom=114.7451
Targets   : a=8.7325, c=5.3234 c/a=0.6096, u=1.0000. Volume per atom=117.1878
E_omega - E_hcp = 1.662mRy per atom 
      GGA Target: -0.735
bcc:     a=  6.00, K=64 Volume per atom=108
target:  a=  6.18, K=118,                     
        E_bcc - E_hcp = 21.698mRy per atom 


 Build Objective Function
     ...with L1 norm
                    predicted       target      squared diff.        p_norm         weight       objective
  a_hcp       :   5.53268008     5.57678969     0.00194566       0.04410961     1000.00000000       46.05527115 
  c_hcp       :   8.85788113     8.85210082     0.00003341       0.00578031     1000.00000000        5.81371992 
  c_11        : 177.75900987   176.10000000     2.75231373       1.65900987       1.00000000        4.41132360 
  c_33        : 188.15681778   190.50000000     5.49050290       2.34318222       1.00000000        7.83368512 
  c_44        :  52.31098007    50.80000000     2.28306077       1.51098007       1.00000000        3.79404084 
  c_12        :  89.73873801    86.90000000     8.05843351       2.83873801       1.00000000       10.89717152 
  c_13        :  64.93191763    68.30000000    11.34397888       3.36808237       1.00000000       14.71206126 
  a_omega     :   8.63324520     8.73254342     0.00986014       0.09929822     250.00000000       27.28958940 
  c_omega     :   5.33306014     5.32343103     0.00009272       0.00962910     250.00000000        2.43045557 
  u_omega     :   0.99998979     1.00000000     0.00000000       0.00001021     500.00000000        0.00510460 
  DE (o, hcp) :   1.66201667    -0.73475386     5.74450895       2.39677052       1.00000000        8.14127947 
  a_bcc       :   5.99529576     6.17948863     0.03392701       0.18419287     500.00000000      109.05994138 
  bandwidth   :   0.25520000     0.42600000     0.02917264       0.17080000     1000.00000000      199.97264000 

Objective function: 440

#+END_SRC
**** Tony's Models
***** 2019-01-07
****** Elastic Constants
******* Strain Derivatives
******** Unrelaxed h = 1e-3
#+BEGIN_SRC python
Elastic constant matrix GPa:
   182.002200    68.805800    59.293400     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000 
    68.805800   176.770400    59.452000     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000 
    59.293400    59.452000   199.124400     0.000000     0.000000    -0.000000     0.000000     0.000000    -0.000000 
     0.000000     0.000000     0.000000    48.829800     0.000000     0.000000    50.098200     0.000000     0.000000 
     0.000000     0.000000     0.000000     0.000000    49.464000     0.000000     0.000000    47.561600     0.000000 
     0.000000     0.000000    -0.000000     0.000000     0.000000    55.171400     0.000000     0.000000    52.634800 
     0.000000     0.000000     0.000000    50.098200     0.000000     0.000000    49.464000     0.000000     0.000000 
     0.000000     0.000000     0.000000     0.000000    47.561600     0.000000     0.000000    48.829800     0.000000 
     0.000000     0.000000    -0.000000     0.000000     0.000000    52.634800     0.000000     0.000000    55.171400 

c11_avg = 179.385  c33 = 199.1243383216876 c44_avg = 49.1469 
c12 = 68.80570289133829 c13_avg = 59.3727

#+END_SRC
******** Relaxed h=1e-3
#+BEGIN_SRC python
Elastic constant matrix GPa
   173.124000    76.098400    59.293400    -0.158538     0.000000     0.000000     0.000000     0.000000     0.000000 
    76.098400   170.111800    59.293400     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000 
    59.293400    59.293400   199.124400     0.000000     0.000000     0.000000     0.000000     0.000000     0.000000 
    -0.158538     0.000000     0.000000    48.829800     0.000000     0.000000    49.781000     0.000000     0.000000 
     0.000000     0.000000     0.000000     0.000000    49.464000     0.000000     0.000000    48.195600     0.000000 
     0.000000     0.000000     0.000000     0.000000     0.000000    48.195600     0.000000     0.000000    46.610400 
     0.000000     0.000000     0.000000    49.781000     0.000000     0.000000    49.464000     0.000000     0.000000 
     0.000000     0.000000     0.000000     0.000000    48.195600     0.000000     0.000000    48.829800     0.000000 
     0.000000     0.000000     0.000000     0.000000     0.000000    46.610400     0.000000     0.000000    48.195600 

c11_avg = 171.6179  c33 = 199.124400  c44_avg = 49.1469 
 c_12 = 76.098400 c_13 = 59.293400
#+END_SRC

With relaxation one finds that there is a negative $C_{14}$ component
when it should be zero. This implies that the structure, on
relaxation, is moving away from hcp and into another more optimal
structure. 
******* Unrelaxed 09/01/19
From Girshick 
[[file:Images/girshick_ec_09-01-19.png]]
#+BEGIN_SRC python
 C11 =  179.4105487815,   C11_exp =  176.1000000000
 C33 =  199.7411232511,   C33_exp =  190.5000000000
 C44 =  49.2452549871,   C44_exp =  50.8000000000
 C66 =  55.1996755007,   C66_exp =  44.6000000000
 C12 = -12062.1968073992,   C12_exp =  86.9000000000
 C13 = -11773.0959208918,   C13_exp =  68.3000000000
 K =  103.7213715237,   K_FR =  109.9666666667
 R =  67.3715578360,   R_FR =  61.8000000000
 H =  58.5592139578,   H_FR =  45.9650000000 

#+END_SRC

[[file:Images/tony_ec_09-01-19.png]]
From Tony
#+BEGIN_SRC python
 C11 =  179.4144752885,   C11_exp =  176.1000000000
 C33 =  199.7411232511,   C33_exp =  190.5000000000
 C44 =  49.2723940787,   C44_exp =  50.8000000000
 C66 =  220.7854442689,   C66_exp =  44.6000000000
 C12 = -262.1564132494,   C12_exp =  86.9000000000
 C13 = -324.7738952427,   C13_exp =  68.3000000000
 K = -1264.8383336416,   K_FR =  109.9666666667
 R =  807.9179447561,   R_FR =  61.8000000000
 H =  698.7467357942,   H_FR =  45.9650000000 

#+END_SRC
******* Relaxed 09/01/19
******** gtol = 1e-6
[[file:Images/girshick_ec_09-01-19_gtol1e-6.png]]
Girshick 
#+BEGIN_SRC python
 C11 =  172.9087030436,   C11_exp =  176.1000000000
 C33 =  198.5744121594,   C33_exp =  190.5000000000
 C44 =  49.2523330247,   C44_exp =  50.8000000000
 C66 =  48.0100583268,   C66_exp =  44.6000000000
 C12 = -11615.4942407936,   C12_exp =  86.9000000000
 C13 = -11535.5170624530,   C13_exp =  68.3000000000
 K =  103.1312742638,   K_FR =  109.9666666667
 R =  65.5404379802,   R_FR =  61.8000000000
 H =  54.3174856150,   H_FR =  45.9650000000 

Girshick CURVATURES GPa 
 [0.0, 172.9004311080267, 172.9169749790961, 198.57441215940486, 497.48462721215066, 292.5218297904287, 486.695326183829, 486.7329294063404, 928.1814683742241, 197.14858238024067, 197.09765185486694, 393.79109416080956, 192.17246592014106, 191.90800069434025, 196.6213139405376, 162.95245684504613] 

Polynomial coeffs 0 
 [ 2.403846172680e+03 -6.920163181274e+01 -6.273310025869e+00  1.357572843835e+00  7.517680653379e-04 -5.869865103730e-01]

Polynomial coeffs 1 
 [ 1.903044861896e+03 -4.334207465834e+01 -6.200648309028e+00  1.357754953393e+00  7.540378787786e-04 -5.869865113054e-01]

Polynomial coeffs 2 
 [-4.917868589163e+04 -6.796328672108e+02  3.263585371778e+00  1.574863053623e+00 -8.199050699247e-03 -5.869864952914e-01]

Polynomial coeffs 3 
 [ 3.205128206180e+04 -3.898965618549e+02 -1.980113636524e+01  3.916451777404e+00  1.496786130586e-03 -5.869865149184e-01]

Polynomial coeffs 4 
 [ 9.465144240806e+03 -1.305725525278e+02 -9.881173515241e+00  2.297486159688e+00  1.126506118904e-03 -5.869865121212e-01]

Polynomial coeffs 5 
 [-5.809294876445e+03 -9.852127061358e+01 -1.135453088524e+01  3.868858537321e+00 -7.467478438242e-03 -5.869865101165e-01]

Polynomial coeffs 6 
 [-6.310096153941e+03 -8.322406783073e+01 -1.124981789038e+01  3.868797348514e+00 -7.467399766901e-03 -5.869865112354e-01]

Polynomial coeffs 7 
 [-4.006410093002e+02  6.337412569028e+01 -2.770032051469e+01  7.360139860159e+00 -6.716937062899e-03 -5.869865079021e-01]

Polynomial coeffs 8 
 [ 6.558740582196e-07 -6.337412596426e+01 -1.619448271167e-10  1.554425990689e+00  7.588095945650e-15 -5.869865174592e-01]

Polynomial coeffs 9 
 [ 1.332430917251e-05 -5.463286706175e+01 -1.964485796358e-09  1.554023892774e+00  5.655976830621e-14 -5.869865153613e-01]

Polynomial coeffs 10 
 [ 6.892467635713e-07 -1.700903263886e+02 -1.655851650898e-10  3.104864510502e+00  7.639041260611e-15 -5.869864947086e-01]

Polynomial coeffs 11 
 [ 1.036658653955e+04 -2.354676574146e+02 -5.373142481023e-01  1.515364947563e+00 -4.065559458558e-06 -5.869865112587e-01]

Polynomial coeffs 12 
 [-7.785735317634e-06 -2.225378791006e+02  1.384014746019e-09  1.513116258773e+00 -5.405862742570e-14 -5.869864990443e-01]

Polynomial coeffs 13 
 [-1.664162660344e+05 -2.467038170221e+03  1.228884396969e+01  1.593577360145e+00 -8.816020687671e-03 -5.869863451515e-01]

Polynomial coeffs 14 
 [ 1.096754809783e+04 -3.547494172056e+02 -7.043360288293e+00  1.255349650346e+00  4.476896561852e-03 -5.869865091142e-01]

#+END_SRC


Tony
[[file:Images/tony_ec_09-01-19_gtol1e-6.png]]
#+BEGIN_SRC python
 C11 =  173.0346579154,   C11_exp =  176.1000000000
 C33 =  198.5744121594,   C33_exp =  190.5000000000
 C44 =  49.2568530334,   C44_exp =  50.8000000000
 C66 =  191.9023467596,   C66_exp =  44.6000000000
 C12 = -210.7700356038,   C12_exp =  86.9000000000
 C13 = -317.8089744286,   C13_exp =  68.3000000000
 K = -1148.1322409320,   K_FR =  109.9666666667
 R =  815.3246721725,   R_FR =  61.8000000000
 H =  635.6114482523,   H_FR =  45.9650000000 

Tony CURVATURES GPa 
[0.0, 173.03465791544974, 198.57441215940486, 191.9023467596449, 251.80675473303774, 49.256853033364514, 196.6213139405376, 163.8312829442945, 146.72504872873364]

Polynomial coeffs 0 
 [ 4.507211527019e+03 -8.449883471457e+01 -6.437754951847e+00  1.358490676015e+00  7.541054778124e-04 -5.869865162471e-01]

Polynomial coeffs 1 
 [-4.917868589163e+04 -6.796328672108e+02  3.263585371778e+00  1.574863053623e+00 -8.199050699247e-03 -5.869864952914e-01]

Polynomial coeffs 2 
 [ 8.463541680370e+03 -2.123397437739e+02 -3.994573151874e-01  1.513192016341e+00 -1.159964998503e-06 -5.869865029371e-01]

Polynomial coeffs 3 
 [ 1.832431891172e+05 -2.767883158595e+03 -1.595434513613e+01  1.976062791391e+00  8.808944930130e-03 -5.869863668531e-01]

Polynomial coeffs 4 
 [ 1.810477061546e-05 -2.549533859606e+00 -2.196695165670e-09  3.883668415017e-01  4.328971618917e-14 -5.869865119580e-01]

Polynomial coeffs 5 
 [-1.664162660344e+05 -2.467038170221e+03  1.228884396969e+01  1.593577360145e+00 -8.816020687671e-03 -5.869863451515e-01]

Polynomial coeffs 6 
 [ 2.328725961840e+04 -3.853438230453e+02 -8.112889714681e+00  1.257934149210e+00  4.483477564102e-03 -5.869865099068e-01]

Polynomial coeffs 7 
 [-9.014423067864e+02 -5.754662013020e+01 -3.494500291531e+00  1.155801282067e+00  4.609557103966e-07 -5.869865136131e-01]

#+END_SRC

******** gtol=xtol=1e-4
With gtol=xtol=1e-4
[[file:Images/girshick_ec_relaxed_09-01-19.png]]
From Girshick
#+BEGIN_SRC python
 C11 =  172.1868387548,   C11_exp =  176.1000000000
 C33 =  199.7411232511,   C33_exp =  190.5000000000
 C44 =  49.2731447340,   C44_exp =  50.8000000000
 C66 =  48.1178624998,   C66_exp =  44.6000000000
 C12 = -11566.5314256067,   C12_exp =  86.9000000000
 C13 = -11547.6359443159,   C13_exp =  68.3000000000
 K =  103.7213715237,   K_FR =  109.9666666667
 R =  67.3715578360,   R_FR =  61.8000000000
 H =  53.0548981566,   H_FR =  45.9650000000 
#+END_SRC

[[file:Images/tony_ec_relaxed_09-01-19.png]]
From Tony
#+BEGIN_SRC python
 C11 =  172.1685458528,   C11_exp =  176.1000000000
 C33 =  199.7411232511,   C33_exp =  190.5000000000
 C44 =  49.2568728288,   C44_exp =  50.8000000000
 C66 =  191.8736970813,   C66_exp =  44.6000000000
 C12 = -211.5788483097,   C12_exp =  86.9000000000
 C13 = -315.1951126369,   C13_exp =  68.3000000000
 K = -1139.8599322106,   K_FR =  109.9666666667
 R =  810.4261972965,   R_FR =  61.8000000000
 H =  634.3223677569,   H_FR =  45.9650000000 

#+END_SRC
******* Unrelaxed
[[file:Images/tonyelastic-2019-01-07.png]]
[[file:Images/girshickelastic-2019-01-07.png]]
******* Relaxed
[[file:Images/tonyelastic-Relaxed-2019-01-07.png]]
#+BEGIN_SRC python
 C11 =  382.0257364183,   C11_exp =  176.1000000000
 C33 =  177.1904094545,   C33_exp =  190.5000000000
 C44 = -284.3306443299,   C44_exp =  50.8000000000
 C66 =  150.4770441289,   C66_exp =  44.6000000000
 C12 =  81.0716481605,   C12_exp =  86.9000000000
 C13 = -613.5092486992,   C13_exp =  68.3000000000
 K = -150.07242402052222,   K_FR =  109.9666666667
 R =  1635.7575991424,   R_FR =  61.8000000000
 H =  747.5127490757,   H_FR =  45.9650000000 
#+END_SRC
[[file:Images/girshickelastic-Relaxed-2019-01-07.png]]
#+BEGIN_SRC python
 C11 =  175.6668786250,   C11_exp =  176.1000000000
 C33 =  177.1904094545,   C33_exp =  190.5000000000
 C44 =  32.8529899251,   C44_exp =  50.8000000000
 C66 =  9.8949010487,   C66_exp =  44.6000000000
 C12 = -11833.3066409149,   C12_exp =  86.9000000000
 C13 = -10947.0085442945,   C13_exp =  68.3000000000
 K =  97.5253130124,   K_FR =  109.9666666667
 R =  52.5007525634,   R_FR =  61.8000000000
 H = -53.1082678520,   H_FR =  45.9650000000 

#+END_SRC
******* Checking Calculation of Elastic constants
This is the output I obtain using Tony's files. 

#+BEGIN_SRC python
python Ti.py -p 'fddtt=0.2682945357 cr2=4.025997513 cr3=-1.111420839 qddstt=0.5207844798 '
Ti.py starting.. ext = ti , file = fmin.val , vals = fddtt=0.2682945357 cr2=4.025997513 cr3=-1.111420839 qddstt=0.5207844798  binaries in /opt/lmto/bld7.13.0/openmpi/3.1.0/intel/14.0.1/o
Get hcp - fcc energy difference ..
 Delta_E    : 7.41700 mRy/atom
 LDA Target : 6.60015 mRy/atom
Getting hcp c/a ...
Got a, c : a=5.4890, c=8.8905 c/a=1.6197. Volume per atom=115.9878
Targets  : a=5.5768, c=8.8521 c/a=1.5873. Volume per atom=119.2108
bandwidth: 0.535 (target: 0.426)
Getting LO curvatures ...
 LO mode curvatures, A:  1.593,  K:  0.586
      Targets (LDA), A:  1.850,  K:  0.827
Getting hcp shear constants ...
shear constants: c_11=179.2, c_33=189.1, c_44= 48.8, c_12= 69.5, c_13= 76.0, Cp=  54.8, Cpp= 54.1, S= 76.2, R=161.4, H=163.7 
         target: c_11=176.1, c_33=190.5, c_44= 50.8, c_12= 86.9, c_13= 68.3, Cp=  44.6, Cpp= 57.5, S= 73.1, R=185.4, H=146.7 
   bulk modulus: 110; target: 110 
Getting omega phase lattice constants and internal parameter ...
Got omega : a=8.5664, c=5.5116 c/a=0.6434, u=0.9849. Volume per atom=116.7581
Targets   : a=8.7325, c=5.3234 c/a=0.6096, u=1.0000. Volume per atom=117.1878
E_omega - E_hcp = -0.636mRy per atom 
      GGA Target: -0.735
bcc:     a=  6.06, K=192 Volume per atom=111, Cp=  8.7, c_44= 32.3
target:  a=  6.18, K=118,                     Cp= 12.0, c_44= 36.0
        E_bcc - E_hcp = 16.141mRy per atom 
 
Build Objective Function ..
                   predicted       target      squared diff.  weight        objective
 a_hcp       :     5.488990       5.576790       0.007709     20000        154.175711 
 c_hcp       :     8.890510       8.852101       0.001475     20000         29.505302 
 c_11        :   179.158035     176.100000       9.351576         5         46.757880 
 c_33        :   189.068274     190.500000       2.049840         5         10.249201 
 c_44        :    48.819033      50.800000       3.924232         5         19.621161 
 c_12        :    69.481301      86.900000     303.411074         5       1517.055371 
 c_13        :    75.975964      68.300000      58.920429         5        294.602143 
 a_omega     :     8.566450       8.732543       0.027587      2000         55.174046 
 c_omega     :     5.511577       5.323431       0.035399      2000         70.797683 
 u_omega     :     0.984896       1.000000       0.000228        20          0.004563 
 DE (o, hcp) :    -0.635500      -0.734754       0.009851        10          0.098513 
 a_bcc       :     6.055721       6.179489       0.015318        10          0.153184 
 bandwidth   :     0.535000       0.426000       0.011881        20          0.237620 
 LO-A        :     1.593190       1.850320       0.066116       200         13.223167 
 LO-K        :     0.585928       0.826586       0.057916       200         11.583255 
 e_fcc-e_hcp :     7.417000       6.600150       0.667244        50         33.362196 
Objective function: 2256

#+END_SRC

****** Phonons
The phonons for the model are as follows
# ()convertfrompdf:t
[[file:Images/hcp-band-dos-2019-01-07.png]] 
#Conversion from [[file:Images/hcp-band-dos-2019-01-07.pdf]]
*** Ti Swarm fitting. 
   - Here used fitting with uniform weights across all target quantities
     without a regularisation of the parameters.
   - It can be seen that the lattice parameters aren't as good as they could
     be. This calls for the use of weighted parameters.
   - Have now started weighted parameter search for the best parameters with
     regards to titanium. 

#+BEGIN_SRC bash
Build Objective Function
 ...with L1 norm 
Objective function: 563 
Objective Function = 563.2340263379571 
Stopping search: Swarm best position change less than 1e-08 
[ 0.34606728 -0.22330935 65.79555644 0.52284417 0. -0.62229341 1.98315066] 
563.2340263379571
#+END_SRC

| Quantity      |  predicted |     target | squared diff. |    p_norm |   weight |  objective |
|---------------+------------+------------+---------------+-----------+----------+------------|
| a_hcp:        |   4.744693 |   5.576790 |      0.692385 |  0.832097 | 1.000000 |   1.524483 |
| c_hcp:        |   7.495518 |   8.852101 |      1.840316 |  1.356583 | 1.000000 |   3.196899 |
| c_11:         | 174.924630 | 176.100000 |      1.381495 |  1.175370 | 1.000000 |   2.556865 |
| c_33:         | 190.161490 | 190.500000 |      0.114589 |  0.338510 | 1.000000 |   0.453099 |
| c_44:         |  54.517320 |  50.800000 |     13.818465 |  3.717320 | 1.000000 |  17.535784 |
| c_12:         |  65.010403 |  86.900000 |    479.154446 | 21.889597 | 1.000000 | 501.044043 |
| c_13:         |  73.335501 |  68.300000 |     25.356271 |  5.035501 | 1.000000 |  30.391772 |
| a_omega:      |   7.331279 |   8.732543 |      1.963543 |  1.401265 | 1.000000 |   3.364808 |
| c_omega:      |   4.768459 |   5.323431 |      0.307994 |  0.554972 | 1.000000 |   0.862966 |
| u_omega:      |   1.000025 |   1.000000 |      0.000000 |  0.000025 | 1.000000 |   0.000025 |
| DeltaE_O_hcp: |  -1.170318 |  -0.734754 |      0.189716 |  0.435564 | 1.000000 |   0.625281 |
| a_bcc:        |   5.331467 |   6.179489 |      0.719140 |  0.848021 | 1.000000 |   1.567162 |
| bandwidth:    |   0.325300 |   0.426000 |      0.010140 |  0.100700 | 1.000000 |         0. |
|               |            |            |               |           |          |            |
**** Fitting varying the canonical weights. 

    rmaxh was set to 8.51, as this is the maximum range of the cutoff. 

| Quantity    |  predicted |     target | squared diff. |    p_norm |      weight |  objective |
|-------------+------------+------------+---------------+-----------+-------------+------------|
| a_hcp       |   5.533022 |   5.576790 |      0.001916 |  0.043768 | 1000.000000 |  45.683665 |
| c_hcp       |   8.850424 |   8.852101 |      0.000003 |  0.001677 | 1000.000000 |   1.680027 |
| c_11        | 182.244765 | 176.100000 |     37.758133 |  6.144765 |    1.000000 |  43.902897 |
| c_33        | 188.810134 | 190.500000 |      2.855646 |  1.689866 |    1.000000 |   4.545512 |
| c_44        |  39.062885 |  50.800000 |    137.759875 | 11.737115 |    1.000000 | 149.496991 |
| c_12        |  68.120096 |  86.900000 |    352.684798 | 18.779904 |    1.000000 | 371.464703 |
| c_13        |  68.010464 |  68.300000 |      0.083831 |  0.289536 |    1.000000 |   0.373367 |
| a_omega     |   8.670219 |   8.732543 |      0.003884 |  0.062324 |  250.000000 |  16.552204 |
| c_omega     |   5.402550 |   5.323431 |      0.006260 |  0.079119 |  250.000000 |  21.344836 |
| u_omega     |   0.999970 |   1.000000 |      0.000000 |  0.000030 |    1.000000 |   0.000030 |
| DE (o, hcp) |  -2.451465 |  -0.734754 |      2.947097 |  1.716711 |    1.000000 |   4.663808 |
| a_bcc       |   6.293291 |   6.179489 |      0.012951 |  0.113803 |  500.000000 |  63.376810 |
| bandwidth   |   0.493300 |   0.426000 |      0.004529 |  0.067300 | 1000.000000 |  71.829290 |

#+BEGIN_SRC bash

fddtt=0.46858665192192056 qddstt=0.6675934593368511 
b0tt=94.48656458962752 p0tt=1.1904330020322709 b1tt=-26.68382995150727 p1tt=0.9999607945279216 
cr1=-6.159908080507984 cr2=3.949841729455178 cr3=-1.0282365318567852 ndt=1.9924390340762406

Objective function: 794
Objective Function  =  794.9141378839079
Stopping search: Swarm best position change less than 1e-08
[ 4.68586652e-01 -4.04075885e-01  9.44865646e+01  1.74317108e-01
 -2.66838300e+01 -3.92062406e-05  1.99243903e+00 -6.15990808e+00
  3.94984173e+00 -1.02823653e+00]
794.9141378839079
#+END_SRC


** Python
*** OS
   Use OS module rather than making a load of files to a certain directory. 
   #+BEGIN_SRC python
import os
############   Current working directory  ########################
# detect the current working directory and print it
path = os.getcwd()  
print ("The current working directory is %s" % path) 

#################   Directories  ########################
# define the name of the directory to be created
path = "/tmp/year"

try:  
    os.mkdir(path)
except OSError:  
    print ("Creation of the directory %s failed" % path)
else:  
    print ("Successfully created the directory %s " % path)

#################   Subdirectories  ########################
# define the name of the directory to be created
path = "/tmp/year/month/week/day"

try:  
    os.makedirs(path)
except OSError:  
    print ("Creation of the directory %s failed" % path)
else:  
    print ("Successfully created the directory %s" % path)
   #+END_SRC
*** Shelve
    Use the shelve module to store multiple objects. 

    To write in:
    #+BEGIN_SRC python
import shelve

integers = [1, 2, 3, 4, 5]

# If you're using Python 2.7, import contextlib and use
# the line:
# with contextlib.closing(shelve.open('shelf-example', 'c')) as shelf:
with shelve.open('shelf-example', 'c') as shelf:
    shelf['ints'] = integers
#+END_SRC

    To extract values:
    #+BEGIN_SRC python
import shelve

# If you're using Python 2.7, import contextlib and use
# the line:
# with contextlib.closing(shelve.open('shelf-example', 'r')) as shelf:
with shelve.open('shelf-example', 'r') as shelf:
    for key in shelf.keys():
        print(repr(key), repr(shelf[key])))
#+END_SRC
 
* DFT Lectures UCL 
** David Bowler O(N) DFT
*** Types of Exchange-correlation Functionals 

**** LDA
     - The electron density is the same as a uniform electron gas.
     - Exchange is Slater. 
     - Still parameterised (Ceperly). Parameters from Quantum Monte-Carlo
       calculations.

**** GGA
     - The gradient of the electron density is included in functional.
     - Have the reduced density \[ \frac{ \nabla n(\mathbf{r})}{n( \mathbf{r}
       )}\]. 
***** Perdew-Burke-Ernzerhof
      - \[ E_{\text{x}} = \int n( \mathbf{r} ) \epsilon_{\text{xc}}[n( \mathbf{r}
        )] F_{\text{x}}(S)d\mathbf{r} \]
      - \[ E_{\text{c}} = \int n[ \epsilon_{\text{c}} + H(n,S) ]d\mathbf{r} \]
      - These integrals are then fitted to various limits. 
	
**** Hybrid Functionals
     - These are functionals to correct the self-interaction energy that is
       apparent in the previously mentioned functionals.
     - The Hartree term \[V_{\text{H}}=\int \frac{\rho(\mathbf{r})}{|\mathbf{r} - \mathbf{r}'|} d\mathbf{r}  \]
     - The exchange term cancels the celf interaction.
     - Generally only a part of this Hartree-Fock calculation is included in
       the function otherwise it is not stable. 


 


DFT speed is limited by how it can find the energies of the system we are
interested in. 
Diagonalisation is inherently an $\mathcal{O}(N^3)$ process. 

To actually build the hamiltonian it is of $\mathcal{O}(N^2)$. 
Solving is $\mathcal{O}(N^3)$. 

How do we solve for DFT?
Generally it depends on the choice of functional we have. 
Hybrid functionals almost scale as $\mathcal{O}(N^4)$ due to the inclusion of exact
exchange interaction by Hartree-Fock. Because of this exact exchange, there
are better band gaps . 

The $\mathcal{O}(N)$ DFT generally comes because of the manipulation of sparse matrices. 
Insead of matrix multiplication being of $\mathcal{O}(N^3)$ we can have matrix
multiplication being of $\mathcal{O}(N)$. 

The reason we can essentially do $\mathcal{O}(N)$ is that in the Kohn-Sham equations, the
density is actually a local function ($n(\mathbf{r})$, not $n(\mathbf{r}-\mathbf{r}')$) 
This means that in theory we can actually have a theory which sufficiently
describes the dynamics of a given system with an electron density that is
local in space. 
In many DFT codes however, the electron density is non-local ($n(
\mathbf{r} - \mathbf{r}')$), and
this slows down the calculation. 
To actually make it $\mathcal{O}(N)$, we have to have range cutoffs for the interactions
of the atoms. This means that the hamilitonian is sparse as quite a lot of the
elements are zero such that we can use methods that involve $\mathcal{O}(N)$
multiplication. 

When it comes to Structural relaxation there are a few things that come to
mind when structures are not converging:
there is usually only one atom that has some huge force on it. 
Consider the boundary conditions. 

For faster diagonalisation of the hamiltonian matrix it may be useful to look
at methods such as Krylov-Subsapace, Lanczos and folded-spectrum methods.

** Jochen Blumberger: Molecular dynamics 
*** Introduction
     - Molecular dynamics is important. (Even at 0K there is a zero point energy
       of vibration).
     - Need theory to see how atoms move

*** Born-Oppenheimer approximation 

    - Have hamiltonian that consists of interaction between:
      * nucleus-nucleus
      * nucleus-electron
      * electron-electron
    - First assumption is that we can write the eigenfunction of
      this large hamiltonian as a product state consisting of an electronic
      ground state and nuclear eigenstate.
    - Second approximation is that we are able to say, as the mass of the ion
      $M_{I} \sim 1000 m_{e}$ then we can say that the kinetic energy term of
      with regard to the nucleus positions will be small.
    - From this we can say that the action of this nuclear kinetic energy
      operator on the electronic eigenstate is small.
    - This means we can neglect the *electronic* wavefunction, and work with
      the equation \[ \hat{H}\Phi(\mathbf{R}) = E^0_{\mathbf{R}}\Phi(\mathbf{R}) \]
      - Where $E^{0}_{ \mathbf{R} }$ is the ground state energy hypersurface
        from the electronic wavefunction. We get this from DFT calculations. 
    - Even now we can only really calculate 8 degrees of freedom for the
      Nuclear wavefunction.

*** Molecular Dynamics

**** Verlet Algorithm
     - This algorithm simply uses the forward and backward derivative of the
       nuclear positions and adds them together to get a formula for the
       positon.
       - \[ \mathbf{R}_{I}(t + \delta t) = 2\mathbf{R}_{I} -
         \mathbf{R}_{I}(t - \delta t) + \frac{f_I(t)}{M_{I}}\delta t^3 \mathcal{O}(\delta t^{4})  \]
       - \[ \mathbf{\dot{R}}_{I}(t) = \frac{1}{2 \delta t} [
         \mathbf{R}_{I}(t + \delta t) - \mathbf{R}_{I}(t - \delta t) ] + \mathcal{O}(\delta t^{3})  \]
       - This causes a problem however: the velocity is calculated a step
         after that of the positons. So this leads to the Velocity Verlet
         algorithm.
       - The timestep for these algorithms is on the order of $1fs$, such that
         one can have adequate resolution of atomic vibrations ( $fs \sim 10^{-14}s^{-1}$, so period is around $10fs$)

**** Velocity Verlet Algorithm
     - For this algorithm the forward derivative with respect to nuclear
       positions is used with a calculation of the force at a later time. 
     - Then the taylor expansion of the position at time t is used with the
       terms of later time.
     - \[ \mathbf{R}_{I}(t + \delta t) = \mathbf{R}_{I}(t) +
       \mathbf{\dot{R}}_{I}\delta t + \frac{f_I(t)}{M_{I}}\delta t^3 + \mathcal{O}(\delta t^{3})  \]
     - \[ \mathbf{ \dot{R} }_{I}(t + \delta t) = \mathbf{\dot{R}}_{I}(t) +  \frac{1}{2 M_{I}} [ \mathbf{f}_{I}(t + \delta t) + \mathbf{R}_{I}(t)  ] + \mathcal{O}(\delta t^{3})  \]

**** How to calculate the forces
     - Use the Hellmann-Feynman theorem.
       - $$ \mathbf{f}_{I} = \bra{ \psi^{0}_{\mathbf{R}} }
         \frac{\partial}{\partial   \mathbf{R}_{I}}\hat{H} \ket{ \psi^{0}_{\mathbf{R}} }  $$
     - This is derived using the parameter $\lambda$, assuming that the
       Hamiltonian depends on this lambda.

**** Carr-Parinello MD
     - This is a form of molecular dynamics where both the positions and the
       orbitals are used as dynamical variables.
     - An \emph{orbital velocity} and \emph(orbital mass} is defined.
     - Using this one can create trajectories that propagate both the ionic
       positions and orbitals in time. 
     - This circumvents the need for self-consistent cycles to obtain the
       correct orbitals, but:
       * The dynamics are not always in the ground state
	 energy.
       * The necessary time step is decreased by about $3-4$ times (speed
         increase is $5-10$ times from removal of self-consistency)
 
** Matteo Salvalglio: Enahnced Sampling
*** Introduction
   - Have a phase space that is $6N$ dimensional (3 spatial positions and 3
     components of momenta).
   - Each point in this phase space is a microstate.
   - The microstates sampled are from the Canonical Ensemble (N,V,T).
   - Can define partition function \[ Q(N,V,T) = \frac{1}{N!h^{3N}}\int
     \text{d}x e^{-\beta\mathbf{H(x)}} \]
   - Can have thermodynamic potential defined from this: \[ A(N,V,T) =
     -k_{B}ln(Q(N,V,T)) \]
   - What we really want to do is obtain an observable quantity from this high
     dimensional space.
*** Ergodic principle
    - This is the principle which states that the amount of
      time that microstates of the same energy spend in a configuration is
      proportional to the volume of phase space they occupy.
    - In other words, every microstate is equiprobable.
    - So the observable quantity: \[ O = \langle O \rangle = \underset{t
      \rightarrow \inf}{lim} \frac{1}{t} \int_{0}^{t} \text{d}t O(x(t)),  \] where
      $O(x(t))$ is the instantaneous realisation of $O(x)$
*** Collective variables
    - Collective variables are just functions that depend on the coordinates
      (CVs) $S(\mathbf{R})$
    - Given a collective variable we can define a probability density $p(S)$
    - So \[ p(S) = \int \text{d}\mathbf{R} [ \delta ( S(\mathbf{R}) - S ) ] p(\mathbf{R}) \]
    - \[ p(\mathbf{R}) = \frac{e^{-\beta U(\mathbf{R)}}}{\int e^{-\beta
      U(\mathbf{R)}} \text{d}\mathbf{R} }, \] where the denominator is the
      configuration integral $\mathcal{Z}$
**** Calculating free energies from collective variables
       - Free energy profile is then just \[  F(S) = -k_{B}T ln( p(S) )\]
       - The free energy change between configurations $\text{A}$ and B are then
       	 just  \[ \Delta F_{\text{AB}} = -k_{B}T ln\big\{  \frac{\int_{B} p(S) \text{d}S}{\int_{A} p(S) \text{d}S}  \big\}\]
       - Can think of these configurations as spikes in $p(S)$ and troughs in
       	 $F(S)$, with some form of energy barrier between them. This region can
       	 then be split in to regions belonging to A and B, from which the
       	 separate integrations can be evaluated.
       - This energy barrier is on the order of $kT$
       - If not, then simulation times will be very large to be able to obtain
         a result that obeys ergodicity.
       - Can use a biased potential for the sampling and work backwards to
         obtain the actual probability density.
*** Biased Potentials
    - Biased potentials can be used to reconstruct the Free energy landscape
      of a system with respect to its collective variables.
    - It does this by using a potential that reduces or removes the free
      energy barrier such that different parts of the phase space can be
      explored.
    - From this, the whole of the phase space in consideration can be explored
      such that the probability distribution with respect to a collective
      variable $p^{b}(S(R))$ can be found.
    - This probability distribution is related to the unbiased probability
      distribution $p^{U}(S(R))$.

**** Introduction to Biased Potentials
     Two main equations:
     The configuration integral $\mathcal{Z}$ and the \emph{Absolute Free
       Energy} $\mathcal{A}(N,V,T)$:
     \[ \mathcal{Z} = \int e^{-\beta U(R)} dR\]
     \[ \mathcal{A}(N,V,T) = -\frac{1}{\beta} \text{ln}\big\{ \mathcal{Z}
     \big\} \]

     Considering two different systems $A$ and $B$, with two different
     potential energy functions $U_A(R)$ and $U_B(R)$, we can have separate
     configurational integrals $\mathcal{Z}_{A}$ and $\mathcal{Z}_{B}$ as per
     the definition above. 

     Then, we can actually pertubate with respect to
     another variable defining $\Delta U_{BA}(R) = U_{B}(R) - U_{A}(R)$
     \[ \mathcal{Z}_{B} =  \frac{\mathcal{Z}_{B}\mathcal{Z}_{A}}{\mathcal{Z}_{A}} = \mathcal{Z}_{A}
     \big\langle e^{-\beta \Delta U_{BA}(R)}\big\rangle_{A} \]

     The last term is the ensemble average with respect to $A$
     This means we can express the free energy difference (Zwanzig 1953)
     \begin{align}
     \Delta \mathcal{A}_{AB} &=  -\text{k}_{\text{B}} T \text{ln} \Big(
     \frac{\mathcal{Z}_{B}}{\mathcal{Z}_{A}}\Big)\\ &=  -\text{k}_{\text{B}} T
     \text{ln} \big\langle e^{-\beta \Delta U_{BA}(R)}\big\rangle_{A} 
     \end{align}

     To sample this efficiently we can use biased potentials. 
     \[ U_{\text{tot}} = U_{0}(R) + V( S(R) ),  \]
     where $V(S(R))$ is the biased potential which is a function of the collective variables. 

     We can define a partition function:
     \[ Q_{\text{tot}} = Q_{0}\big\langle e^{-\beta V(S(R))}\big\rangle_{0}  \]

     Can express the actual probability density of the system in terms of a biased potential 
     \[ p^{u}(S(R)) = p^{b}(S(R)) e^{ \beta V(S(R)) } \big\langle e^{-\beta V}\big\rangle_{0} \]
     where $u$ and $b$ denote unbiased and biased configurations.  

     This gives the free energy as
     \begin{align}
     F( S(R) )  =  - \text{k}_{\text{B}} T \text{ln} \big\{  p^{b}(S(R)) \big\} &- V(S(R)) \\
                  &- \text{k}_{\text{B}} T \text{ln} \big\{ \big\langle e^{-\beta V}\big\rangle_{0} \}, 
     \end{align}
     where the term on the second line is a constant. 

**** Umbrella sampling
     If we don't know the shape of the free energy surface then we can use /Umbrella Sampling/
     If we know for example, two metastable states that we want to sample the we can make a pathway between them using this method.
     
     Umbrella sampling defines a series of biases simulations (/windows/) such that one can reconstruct the free energy surface. 
     These simulations must have probability distributions that overlap. 

     When one goes through the process of umbrella sampling, naively going through the reconstruction of the free energy surface
     gives a poor reconstruction. It is necessary that weights are in place such that the reconstruction of the global free energy
     profile is smooth. 
     
     \[  F( S(R) )  =  - \text{k}_{\text{B}} T \text{ln} \big\{  p^{b}(S(R))
     \big\} - V(S(R)) + C_{i} , \] 
     \[ p_{i} = p^{b}_{i}(S) e^{ +\beta V(R) }e^{\beta C_{i}} \]
     \[ p(S) = \sum_{N \text{windows}} p_i{S} w_{i} \]
     \[ \frac{ \eta_{i} e^{ -\beta U_{i}(S) e^{\beta C_{i}}  }  }{ \sum^{ N
     \text{ windows}}_{J=1} \eta_{J} e^{ -\beta V_{J}(S) } e^{ \beta C_{J} }} \]
     
     
     For these terms we need to know what the unbiased $p(S)$ is, but that is what we are trying to solve. 
     We need to know the ensemble average over the unbiased probability distribution. 
     \[ e^{-\beta C_{i}} = \int e^{ \beta V_{i}(S) } p(S) \text{d}S \]
     We can guess that all $C_{i} = 0$ and then solve self-consistently until shifts of $C_i$ are within some tolerance. 

***** Related papers and books
      Look up *Umbrella integration* and *Thermodynamic integration*, where one can achieve this result analytically. 
      
      Original paper by Zwanzig in 1954
      
      1993 Ben Roux: WHAM

      m.salvalaglio@ucl.ac.uk


      For the error of these one can do block averaging. 

      
**** Adaptive potential bias

** Michail Stamakatis: Statistical Mechanics
   
*** Introduction
    Intensive variables don't depend on size of system (e.g. T, $\mu$)
    Extensive variables do: ($\mathcal{N}$, V$\mathcal{V}$, $\mathcal{S}$)
** Useful definitions of Thermodynamic potentials
   - Internal Energy:
     * The capacity to do work and release heat.
     * The energy contained withing the system excluding kinetic energy.
     * Equation: \[ U = \int ( t\text{d}S -p\text{d}V + \sum_{i}\mu_{i}\text{d}N_{i} ) \]
     * $\Delta U$ is the total energy added to the system.
     * Natural variables: $\{ S, V, \{N_{i}\} \}$
   - Helmholtz Free Energy:
     * The energy at constant temperature and pressure.
     * The capacity to do mechanical plus non-mechanical work
     * Equation: \[ F = U - TS \]
     * $\Delta F$ is the total work done on the system. 
     * Natural variables: $\{ T, V, \{N_{i}\} \}$
   - Gibbs Free Energy:
     * The capacity to do non-mechanical work.
     * The maximum amount of non-expansion work.
     * The energy at constant temperature and pressure.
     * Gibbs energy is the thermodynamic potential that is minimized when a
       system reaches chemical equilibrium at constant pressure and
       temperature.  
    * Equation: \[ G = U + pV - TS  \]
     * $\Delta G$ is the total non-mechanical work done on the system. 
     * Natural variables: $\{ T, p, \{N_{i}\} \}$
   - Enthalpy:
     * The capacity to do non-mechanical work plus capacity to release heat.
     * Equation: \[ H = U + pV \]
     * $\Delta H$ is the total non-mechanical work and heat added to the
       system. 
     * Natural variables: $\{ S, p, \{N_{i}\} \}$

*** Mnemonic Picture
    [[file:Images/Thermodynamic_mnemonic.png]]

* Useful Notes
** Org-mode 
#+BEGIN_SRC elisp
(setq org-latex-create-formula-image-program 'dvipng)
#+END_SRC

** Physics

* org-mode cheat sheet 
  - New TODO: M-<shift>-<ret>
  - Done TODO: C-c C-t
  - Links: [[][]] [link] then [description]
  - Open link: Move over cursor and do C-c C-o
  - Link to local files:
    * Open file (C-x C-f) then do C-c l,
    * then go back to org file and do C-c C-l (e.g. [[file:~/Documents/docs/PhDPaperSummary/upgrade_rep_plus_notes.tex::\documentclass%5B][Upgrade_report_plus_notes]])
  - To remove window in buffer C-x 0
  - Overview of document <shift>-<TAB> to condense to titles.
  - Can have global todo list
  - <s TAB expands to a ‘src’ code block.
  - <l TAB expands to a 'latex' code block. '


  - If I want more help I can go to the [[https://orgmode.org/manual/][org-mode manual]]



* Bibliography 
<<bibliography link>>

bibliographystyle:unsrt
bibliography:./bibliography/org-refs.bib

# \bibliographystyle{plain}
# \bibliography{org-refs.bib}
